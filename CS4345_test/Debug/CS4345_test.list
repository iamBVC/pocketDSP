
CS4345_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000534c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080055e4  080055e4  000155e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055f4  080055f4  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080055f4  080055f4  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080055f4  080055f4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055f4  080055f4  000155f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055f8  080055f8  000155f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  24000000  080055fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000418  24000014  08005610  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400042c  08005610  0002042c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016dca  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002355  00000000  00000000  00036e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e10  00000000  00000000  00039168  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d38  00000000  00000000  00039f78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000356ce  00000000  00000000  0003acb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b9c3  00000000  00000000  0007037e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00159b72  00000000  00000000  0007bd41  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d58b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003af8  00000000  00000000  001d5930  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000014 	.word	0x24000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080055cc 	.word	0x080055cc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000018 	.word	0x24000018
 80002d4:	080055cc 	.word	0x080055cc

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002dc:	f000 fc2a 	bl	8000b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e0:	f000 f854 	bl	800038c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e4:	f000 f9fa 	bl	80006dc <MX_GPIO_Init>
  MX_TIM17_Init();
 80002e8:	f000 f982 	bl	80005f0 <MX_TIM17_Init>
  MX_I2S1_Init();
 80002ec:	f000 f8fe 	bl	80004ec <MX_I2S1_Init>
  MX_TIM13_Init();
 80002f0:	f000 f932 	bl	8000558 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  //DAC Init
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2110      	movs	r1, #16
 80002f8:	481e      	ldr	r0, [pc, #120]	; (8000374 <main+0x9c>)
 80002fa:	f000 ff9b 	bl	8001234 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80002fe:	2200      	movs	r2, #0
 8000300:	2120      	movs	r1, #32
 8000302:	481c      	ldr	r0, [pc, #112]	; (8000374 <main+0x9c>)
 8000304:	f000 ff96 	bl	8001234 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2140      	movs	r1, #64	; 0x40
 800030c:	4819      	ldr	r0, [pc, #100]	; (8000374 <main+0x9c>)
 800030e:	f000 ff91 	bl	8001234 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	2180      	movs	r1, #128	; 0x80
 8000316:	4817      	ldr	r0, [pc, #92]	; (8000374 <main+0x9c>)
 8000318:	f000 ff8c 	bl	8001234 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800031c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000320:	f000 fc9a 	bl	8000c58 <HAL_Delay>
  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8000324:	2100      	movs	r1, #0
 8000326:	4814      	ldr	r0, [pc, #80]	; (8000378 <main+0xa0>)
 8000328:	f004 f95a 	bl	80045e0 <HAL_TIM_PWM_Start>
  HAL_Delay(1000);
 800032c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000330:	f000 fc92 	bl	8000c58 <HAL_Delay>
  static uint32_t dac_data_null[] = {0x00000000};
  HAL_I2S_Init(&hi2s1);
 8000334:	4811      	ldr	r0, [pc, #68]	; (800037c <main+0xa4>)
 8000336:	f000 ff97 	bl	8001268 <HAL_I2S_Init>
  HAL_I2S_Transmit(&hi2s1, (uint16_t*)dac_data_null, 1, 0);
 800033a:	2300      	movs	r3, #0
 800033c:	2201      	movs	r2, #1
 800033e:	4910      	ldr	r1, [pc, #64]	; (8000380 <main+0xa8>)
 8000340:	480e      	ldr	r0, [pc, #56]	; (800037c <main+0xa4>)
 8000342:	f001 f8b1 	bl	80014a8 <HAL_I2S_Transmit>
  HAL_Delay(1000);
 8000346:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800034a:	f000 fc85 	bl	8000c58 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		static uint32_t data1[] = {0x00000000};
		static uint32_t data2[] = {0xFFFFFF00};
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)data1, 1, 0);
 800034e:	2300      	movs	r3, #0
 8000350:	2201      	movs	r2, #1
 8000352:	490c      	ldr	r1, [pc, #48]	; (8000384 <main+0xac>)
 8000354:	4809      	ldr	r0, [pc, #36]	; (800037c <main+0xa4>)
 8000356:	f001 f8a7 	bl	80014a8 <HAL_I2S_Transmit>
		HAL_Delay(5);
 800035a:	2005      	movs	r0, #5
 800035c:	f000 fc7c 	bl	8000c58 <HAL_Delay>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)data2, 1, 0);
 8000360:	2300      	movs	r3, #0
 8000362:	2201      	movs	r2, #1
 8000364:	4908      	ldr	r1, [pc, #32]	; (8000388 <main+0xb0>)
 8000366:	4805      	ldr	r0, [pc, #20]	; (800037c <main+0xa4>)
 8000368:	f001 f89e 	bl	80014a8 <HAL_I2S_Transmit>
		HAL_Delay(5);
 800036c:	2005      	movs	r0, #5
 800036e:	f000 fc73 	bl	8000c58 <HAL_Delay>
	while (1) {
 8000372:	e7ec      	b.n	800034e <main+0x76>
 8000374:	58020000 	.word	0x58020000
 8000378:	24000088 	.word	0x24000088
 800037c:	240000d4 	.word	0x240000d4
 8000380:	24000034 	.word	0x24000034
 8000384:	24000038 	.word	0x24000038
 8000388:	24000000 	.word	0x24000000

0800038c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b0cc      	sub	sp, #304	; 0x130
 8000390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000392:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000396:	224c      	movs	r2, #76	; 0x4c
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f005 f90e 	bl	80055bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80003a4:	2220      	movs	r2, #32
 80003a6:	2100      	movs	r1, #0
 80003a8:	4618      	mov	r0, r3
 80003aa:	f005 f907 	bl	80055bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80003ae:	f107 0308 	add.w	r3, r7, #8
 80003b2:	4618      	mov	r0, r3
 80003b4:	23bc      	movs	r3, #188	; 0xbc
 80003b6:	461a      	mov	r2, r3
 80003b8:	2100      	movs	r1, #0
 80003ba:	f005 f8ff 	bl	80055bc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003be:	2002      	movs	r0, #2
 80003c0:	f001 f98e 	bl	80016e0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	4b46      	ldr	r3, [pc, #280]	; (80004e4 <SystemClock_Config+0x158>)
 80003cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ce:	4a45      	ldr	r2, [pc, #276]	; (80004e4 <SystemClock_Config+0x158>)
 80003d0:	f023 0301 	bic.w	r3, r3, #1
 80003d4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80003d6:	4b43      	ldr	r3, [pc, #268]	; (80004e4 <SystemClock_Config+0x158>)
 80003d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003da:	f003 0201 	and.w	r2, r3, #1
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	4b41      	ldr	r3, [pc, #260]	; (80004e8 <SystemClock_Config+0x15c>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	4a40      	ldr	r2, [pc, #256]	; (80004e8 <SystemClock_Config+0x15c>)
 80003e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80003ec:	6193      	str	r3, [r2, #24]
 80003ee:	4b3e      	ldr	r3, [pc, #248]	; (80004e8 <SystemClock_Config+0x15c>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003fe:	bf00      	nop
 8000400:	4b39      	ldr	r3, [pc, #228]	; (80004e8 <SystemClock_Config+0x15c>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000408:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800040c:	d1f8      	bne.n	8000400 <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800040e:	2301      	movs	r3, #1
 8000410:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000414:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000418:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800041c:	2302      	movs	r3, #2
 800041e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000422:	2302      	movs	r3, #2
 8000424:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000428:	2302      	movs	r3, #2
 800042a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 64;
 800042e:	2340      	movs	r3, #64	; 0x40
 8000430:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000434:	2302      	movs	r3, #2
 8000436:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800043a:	2308      	movs	r3, #8
 800043c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000440:	2302      	movs	r3, #2
 8000442:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000446:	230c      	movs	r3, #12
 8000448:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800044c:	2300      	movs	r3, #0
 800044e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000452:	2300      	movs	r3, #0
 8000454:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000458:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800045c:	4618      	mov	r0, r3
 800045e:	f001 f979 	bl	8001754 <HAL_RCC_OscConfig>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000468:	f000 f990 	bl	800078c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800046c:	233f      	movs	r3, #63	; 0x3f
 800046e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000472:	2303      	movs	r3, #3
 8000474:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000478:	2300      	movs	r3, #0
 800047a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800047e:	2308      	movs	r3, #8
 8000480:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000484:	2340      	movs	r3, #64	; 0x40
 8000486:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800048a:	2340      	movs	r3, #64	; 0x40
 800048c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000490:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000494:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000498:	2340      	movs	r3, #64	; 0x40
 800049a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800049e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80004a2:	2102      	movs	r1, #2
 80004a4:	4618      	mov	r0, r3
 80004a6:	f001 fd65 	bl	8001f74 <HAL_RCC_ClockConfig>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <SystemClock_Config+0x128>
  {
    Error_Handler();
 80004b0:	f000 f96c 	bl	800078c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80004b4:	f107 0308 	add.w	r3, r7, #8
 80004b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004bc:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80004be:	f107 0308 	add.w	r3, r7, #8
 80004c2:	2200      	movs	r2, #0
 80004c4:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80004c6:	f107 0308 	add.w	r3, r7, #8
 80004ca:	4618      	mov	r0, r3
 80004cc:	f002 f8aa 	bl	8002624 <HAL_RCCEx_PeriphCLKConfig>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <SystemClock_Config+0x14e>
  {
    Error_Handler();
 80004d6:	f000 f959 	bl	800078c <Error_Handler>
  }
}
 80004da:	bf00      	nop
 80004dc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	58000400 	.word	0x58000400
 80004e8:	58024800 	.word	0x58024800

080004ec <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 80004f0:	4b16      	ldr	r3, [pc, #88]	; (800054c <MX_I2S1_Init+0x60>)
 80004f2:	4a17      	ldr	r2, [pc, #92]	; (8000550 <MX_I2S1_Init+0x64>)
 80004f4:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 80004f6:	4b15      	ldr	r3, [pc, #84]	; (800054c <MX_I2S1_Init+0x60>)
 80004f8:	2204      	movs	r2, #4
 80004fa:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_MSB;
 80004fc:	4b13      	ldr	r3, [pc, #76]	; (800054c <MX_I2S1_Init+0x60>)
 80004fe:	2210      	movs	r2, #16
 8000500:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000502:	4b12      	ldr	r3, [pc, #72]	; (800054c <MX_I2S1_Init+0x60>)
 8000504:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000508:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800050a:	4b10      	ldr	r3, [pc, #64]	; (800054c <MX_I2S1_Init+0x60>)
 800050c:	2200      	movs	r2, #0
 800050e:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_192K;
 8000510:	4b0e      	ldr	r3, [pc, #56]	; (800054c <MX_I2S1_Init+0x60>)
 8000512:	4a10      	ldr	r2, [pc, #64]	; (8000554 <MX_I2S1_Init+0x68>)
 8000514:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000516:	4b0d      	ldr	r3, [pc, #52]	; (800054c <MX_I2S1_Init+0x60>)
 8000518:	2200      	movs	r2, #0
 800051a:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 800051c:	4b0b      	ldr	r3, [pc, #44]	; (800054c <MX_I2S1_Init+0x60>)
 800051e:	2200      	movs	r2, #0
 8000520:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_ENABLE;
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <MX_I2S1_Init+0x60>)
 8000524:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000528:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 800052a:	4b08      	ldr	r3, [pc, #32]	; (800054c <MX_I2S1_Init+0x60>)
 800052c:	2200      	movs	r2, #0
 800052e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <MX_I2S1_Init+0x60>)
 8000532:	2200      	movs	r2, #0
 8000534:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000536:	4805      	ldr	r0, [pc, #20]	; (800054c <MX_I2S1_Init+0x60>)
 8000538:	f000 fe96 	bl	8001268 <HAL_I2S_Init>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_I2S1_Init+0x5a>
  {
    Error_Handler();
 8000542:	f000 f923 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	240000d4 	.word	0x240000d4
 8000550:	40013000 	.word	0x40013000
 8000554:	0002ee00 	.word	0x0002ee00

08000558 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]
 800056c:	615a      	str	r2, [r3, #20]
 800056e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000570:	4b1d      	ldr	r3, [pc, #116]	; (80005e8 <MX_TIM13_Init+0x90>)
 8000572:	4a1e      	ldr	r2, [pc, #120]	; (80005ec <MX_TIM13_Init+0x94>)
 8000574:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8000576:	4b1c      	ldr	r3, [pc, #112]	; (80005e8 <MX_TIM13_Init+0x90>)
 8000578:	2200      	movs	r2, #0
 800057a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800057c:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <MX_TIM13_Init+0x90>)
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 7;
 8000582:	4b19      	ldr	r3, [pc, #100]	; (80005e8 <MX_TIM13_Init+0x90>)
 8000584:	2207      	movs	r2, #7
 8000586:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000588:	4b17      	ldr	r3, [pc, #92]	; (80005e8 <MX_TIM13_Init+0x90>)
 800058a:	2200      	movs	r2, #0
 800058c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800058e:	4b16      	ldr	r3, [pc, #88]	; (80005e8 <MX_TIM13_Init+0x90>)
 8000590:	2200      	movs	r2, #0
 8000592:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000594:	4814      	ldr	r0, [pc, #80]	; (80005e8 <MX_TIM13_Init+0x90>)
 8000596:	f003 ff09 	bl	80043ac <HAL_TIM_Base_Init>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_TIM13_Init+0x4c>
  {
    Error_Handler();
 80005a0:	f000 f8f4 	bl	800078c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80005a4:	4810      	ldr	r0, [pc, #64]	; (80005e8 <MX_TIM13_Init+0x90>)
 80005a6:	f003 ffb9 	bl	800451c <HAL_TIM_PWM_Init>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_TIM13_Init+0x5c>
  {
    Error_Handler();
 80005b0:	f000 f8ec 	bl	800078c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005b4:	2360      	movs	r3, #96	; 0x60
 80005b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 3;
 80005b8:	2303      	movs	r3, #3
 80005ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2200      	movs	r2, #0
 80005c8:	4619      	mov	r1, r3
 80005ca:	4807      	ldr	r0, [pc, #28]	; (80005e8 <MX_TIM13_Init+0x90>)
 80005cc:	f004 fa70 	bl	8004ab0 <HAL_TIM_PWM_ConfigChannel>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_TIM13_Init+0x82>
  {
    Error_Handler();
 80005d6:	f000 f8d9 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80005da:	4803      	ldr	r0, [pc, #12]	; (80005e8 <MX_TIM13_Init+0x90>)
 80005dc:	f000 f982 	bl	80008e4 <HAL_TIM_MspPostInit>

}
 80005e0:	bf00      	nop
 80005e2:	3720      	adds	r7, #32
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	24000088 	.word	0x24000088
 80005ec:	40001c00 	.word	0x40001c00

080005f0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b092      	sub	sp, #72	; 0x48
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80005f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]
 8000606:	615a      	str	r2, [r3, #20]
 8000608:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800060a:	463b      	mov	r3, r7
 800060c:	222c      	movs	r2, #44	; 0x2c
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f004 ffd3 	bl	80055bc <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000616:	4b2f      	ldr	r3, [pc, #188]	; (80006d4 <MX_TIM17_Init+0xe4>)
 8000618:	4a2f      	ldr	r2, [pc, #188]	; (80006d8 <MX_TIM17_Init+0xe8>)
 800061a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 99;
 800061c:	4b2d      	ldr	r3, [pc, #180]	; (80006d4 <MX_TIM17_Init+0xe4>)
 800061e:	2263      	movs	r2, #99	; 0x63
 8000620:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000622:	4b2c      	ldr	r3, [pc, #176]	; (80006d4 <MX_TIM17_Init+0xe4>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 99;
 8000628:	4b2a      	ldr	r3, [pc, #168]	; (80006d4 <MX_TIM17_Init+0xe4>)
 800062a:	2263      	movs	r2, #99	; 0x63
 800062c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <MX_TIM17_Init+0xe4>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000634:	4b27      	ldr	r3, [pc, #156]	; (80006d4 <MX_TIM17_Init+0xe4>)
 8000636:	2200      	movs	r2, #0
 8000638:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <MX_TIM17_Init+0xe4>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000640:	4824      	ldr	r0, [pc, #144]	; (80006d4 <MX_TIM17_Init+0xe4>)
 8000642:	f003 feb3 	bl	80043ac <HAL_TIM_Base_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 800064c:	f000 f89e 	bl	800078c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8000650:	4820      	ldr	r0, [pc, #128]	; (80006d4 <MX_TIM17_Init+0xe4>)
 8000652:	f003 ff02 	bl	800445a <HAL_TIM_OC_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 800065c:	f000 f896 	bl	800078c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000660:	2300      	movs	r3, #0
 8000662:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000668:	2300      	movs	r3, #0
 800066a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800066c:	2300      	movs	r3, #0
 800066e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000670:	2300      	movs	r3, #0
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000674:	2300      	movs	r3, #0
 8000676:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000678:	2300      	movs	r3, #0
 800067a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800067c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000680:	2200      	movs	r2, #0
 8000682:	4619      	mov	r1, r3
 8000684:	4813      	ldr	r0, [pc, #76]	; (80006d4 <MX_TIM17_Init+0xe4>)
 8000686:	f004 f99d 	bl	80049c4 <HAL_TIM_OC_ConfigChannel>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 8000690:	f000 f87c 	bl	800078c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000694:	2300      	movs	r3, #0
 8000696:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006a4:	2300      	movs	r3, #0
 80006a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006b2:	2300      	movs	r3, #0
 80006b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80006b6:	463b      	mov	r3, r7
 80006b8:	4619      	mov	r1, r3
 80006ba:	4806      	ldr	r0, [pc, #24]	; (80006d4 <MX_TIM17_Init+0xe4>)
 80006bc:	f004 febe 	bl	800543c <HAL_TIMEx_ConfigBreakDeadTime>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 80006c6:	f000 f861 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	3748      	adds	r7, #72	; 0x48
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	2400003c 	.word	0x2400003c
 80006d8:	40014800 	.word	0x40014800

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e2:	4b12      	ldr	r3, [pc, #72]	; (800072c <MX_GPIO_Init+0x50>)
 80006e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e8:	4a10      	ldr	r2, [pc, #64]	; (800072c <MX_GPIO_Init+0x50>)
 80006ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_GPIO_Init+0x50>)
 80006f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <MX_GPIO_Init+0x50>)
 8000702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000706:	4a09      	ldr	r2, [pc, #36]	; (800072c <MX_GPIO_Init+0x50>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_GPIO_Init+0x50>)
 8000712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	683b      	ldr	r3, [r7, #0]

}
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	58024400 	.word	0x58024400

08000730 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]

	if (htim == &htim17) {
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4a10      	ldr	r2, [pc, #64]	; (800077c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d119      	bne.n	8000774 <HAL_TIM_PeriodElapsedCallback+0x44>

		HAL_I2S_Transmit(&hi2s1, (uint16_t*)audio_buffer[buf_index], 1, 0);
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800074c:	4619      	mov	r1, r3
 800074e:	2300      	movs	r3, #0
 8000750:	2201      	movs	r2, #1
 8000752:	480d      	ldr	r0, [pc, #52]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000754:	f000 fea8 	bl	80014a8 <HAL_I2S_Transmit>

		if (buf_index < 191)
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2bbe      	cmp	r3, #190	; 0xbe
 800075e:	d806      	bhi.n	800076e <HAL_TIM_PeriodElapsedCallback+0x3e>
			buf_index++;
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	3301      	adds	r3, #1
 8000766:	b2da      	uxtb	r2, r3
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800076a:	701a      	strb	r2, [r3, #0]
		else
			buf_index = 0;

	}
}
 800076c:	e002      	b.n	8000774 <HAL_TIM_PeriodElapsedCallback+0x44>
			buf_index = 0;
 800076e:	4b04      	ldr	r3, [pc, #16]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	2400003c 	.word	0x2400003c
 8000780:	24000030 	.word	0x24000030
 8000784:	24000128 	.word	0x24000128
 8000788:	240000d4 	.word	0x240000d4

0800078c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
	...

0800079c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a2:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <HAL_MspInit+0x30>)
 80007a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007a8:	4a08      	ldr	r2, [pc, #32]	; (80007cc <HAL_MspInit+0x30>)
 80007aa:	f043 0302 	orr.w	r3, r3, #2
 80007ae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_MspInit+0x30>)
 80007b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007b8:	f003 0302 	and.w	r3, r3, #2
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	58024400 	.word	0x58024400

080007d0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a1a      	ldr	r2, [pc, #104]	; (8000858 <HAL_I2S_MspInit+0x88>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d12d      	bne.n	800084e <HAL_I2S_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <HAL_I2S_MspInit+0x8c>)
 80007f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80007f8:	4a18      	ldr	r2, [pc, #96]	; (800085c <HAL_I2S_MspInit+0x8c>)
 80007fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000802:	4b16      	ldr	r3, [pc, #88]	; (800085c <HAL_I2S_MspInit+0x8c>)
 8000804:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000808:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <HAL_I2S_MspInit+0x8c>)
 8000812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000816:	4a11      	ldr	r2, [pc, #68]	; (800085c <HAL_I2S_MspInit+0x8c>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <HAL_I2S_MspInit+0x8c>)
 8000822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SDO
    */
    GPIO_InitStruct.Pin = DAC_LRCK_Pin|DAC_SCLK_Pin|DAC_SDIN_Pin;
 800082e:	23b0      	movs	r3, #176	; 0xb0
 8000830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083a:	2303      	movs	r3, #3
 800083c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800083e:	2305      	movs	r3, #5
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4619      	mov	r1, r3
 8000848:	4805      	ldr	r0, [pc, #20]	; (8000860 <HAL_I2S_MspInit+0x90>)
 800084a:	f000 fb43 	bl	8000ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800084e:	bf00      	nop
 8000850:	3728      	adds	r7, #40	; 0x28
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40013000 	.word	0x40013000
 800085c:	58024400 	.word	0x58024400
 8000860:	58020000 	.word	0x58020000

08000864 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a19      	ldr	r2, [pc, #100]	; (80008d8 <HAL_TIM_Base_MspInit+0x74>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d10f      	bne.n	8000896 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8000876:	4b19      	ldr	r3, [pc, #100]	; (80008dc <HAL_TIM_Base_MspInit+0x78>)
 8000878:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800087c:	4a17      	ldr	r2, [pc, #92]	; (80008dc <HAL_TIM_Base_MspInit+0x78>)
 800087e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000882:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <HAL_TIM_Base_MspInit+0x78>)
 8000888:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800088c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000894:	e01b      	b.n	80008ce <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM17)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a11      	ldr	r2, [pc, #68]	; (80008e0 <HAL_TIM_Base_MspInit+0x7c>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d116      	bne.n	80008ce <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80008a0:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <HAL_TIM_Base_MspInit+0x78>)
 80008a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80008a6:	4a0d      	ldr	r2, [pc, #52]	; (80008dc <HAL_TIM_Base_MspInit+0x78>)
 80008a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008ac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80008b0:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <HAL_TIM_Base_MspInit+0x78>)
 80008b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80008b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2100      	movs	r1, #0
 80008c2:	2076      	movs	r0, #118	; 0x76
 80008c4:	f000 fad1 	bl	8000e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80008c8:	2076      	movs	r0, #118	; 0x76
 80008ca:	f000 fae8 	bl	8000e9e <HAL_NVIC_EnableIRQ>
}
 80008ce:	bf00      	nop
 80008d0:	3710      	adds	r7, #16
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40001c00 	.word	0x40001c00
 80008dc:	58024400 	.word	0x58024400
 80008e0:	40014800 	.word	0x40014800

080008e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b088      	sub	sp, #32
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a12      	ldr	r2, [pc, #72]	; (800094c <HAL_TIM_MspPostInit+0x68>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d11e      	bne.n	8000944 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	4b12      	ldr	r3, [pc, #72]	; (8000950 <HAL_TIM_MspPostInit+0x6c>)
 8000908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800090c:	4a10      	ldr	r2, [pc, #64]	; (8000950 <HAL_TIM_MspPostInit+0x6c>)
 800090e:	f043 0301 	orr.w	r3, r3, #1
 8000912:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <HAL_TIM_MspPostInit+0x6c>)
 8000918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800091c:	f003 0301 	and.w	r3, r3, #1
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PA6     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = DAC_MCLK_Pin;
 8000924:	2340      	movs	r3, #64	; 0x40
 8000926:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000930:	2303      	movs	r3, #3
 8000932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8000934:	2309      	movs	r3, #9
 8000936:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC_MCLK_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	4619      	mov	r1, r3
 800093e:	4805      	ldr	r0, [pc, #20]	; (8000954 <HAL_TIM_MspPostInit+0x70>)
 8000940:	f000 fac8 	bl	8000ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8000944:	bf00      	nop
 8000946:	3720      	adds	r7, #32
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40001c00 	.word	0x40001c00
 8000950:	58024400 	.word	0x58024400
 8000954:	58020000 	.word	0x58020000

08000958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <HardFault_Handler+0x4>

0800096c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <MemManage_Handler+0x4>

08000972 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <BusFault_Handler+0x4>

08000978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <UsageFault_Handler+0x4>

0800097e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ac:	f000 f934 	bl	8000c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80009b8:	4802      	ldr	r0, [pc, #8]	; (80009c4 <TIM17_IRQHandler+0x10>)
 80009ba:	f003 fee3 	bl	8004784 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	2400003c 	.word	0x2400003c

080009c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009cc:	4b39      	ldr	r3, [pc, #228]	; (8000ab4 <SystemInit+0xec>)
 80009ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009d2:	4a38      	ldr	r2, [pc, #224]	; (8000ab4 <SystemInit+0xec>)
 80009d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009dc:	4b36      	ldr	r3, [pc, #216]	; (8000ab8 <SystemInit+0xf0>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f003 030f 	and.w	r3, r3, #15
 80009e4:	2b06      	cmp	r3, #6
 80009e6:	d807      	bhi.n	80009f8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009e8:	4b33      	ldr	r3, [pc, #204]	; (8000ab8 <SystemInit+0xf0>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f023 030f 	bic.w	r3, r3, #15
 80009f0:	4a31      	ldr	r2, [pc, #196]	; (8000ab8 <SystemInit+0xf0>)
 80009f2:	f043 0307 	orr.w	r3, r3, #7
 80009f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80009f8:	4b30      	ldr	r3, [pc, #192]	; (8000abc <SystemInit+0xf4>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a2f      	ldr	r2, [pc, #188]	; (8000abc <SystemInit+0xf4>)
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a04:	4b2d      	ldr	r3, [pc, #180]	; (8000abc <SystemInit+0xf4>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a0a:	4b2c      	ldr	r3, [pc, #176]	; (8000abc <SystemInit+0xf4>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	492b      	ldr	r1, [pc, #172]	; (8000abc <SystemInit+0xf4>)
 8000a10:	4b2b      	ldr	r3, [pc, #172]	; (8000ac0 <SystemInit+0xf8>)
 8000a12:	4013      	ands	r3, r2
 8000a14:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a16:	4b28      	ldr	r3, [pc, #160]	; (8000ab8 <SystemInit+0xf0>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f003 030f 	and.w	r3, r3, #15
 8000a1e:	2b07      	cmp	r3, #7
 8000a20:	d907      	bls.n	8000a32 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a22:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <SystemInit+0xf0>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f023 030f 	bic.w	r3, r3, #15
 8000a2a:	4a23      	ldr	r2, [pc, #140]	; (8000ab8 <SystemInit+0xf0>)
 8000a2c:	f043 0307 	orr.w	r3, r3, #7
 8000a30:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000a32:	4b22      	ldr	r3, [pc, #136]	; (8000abc <SystemInit+0xf4>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000a38:	4b20      	ldr	r3, [pc, #128]	; (8000abc <SystemInit+0xf4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000a3e:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <SystemInit+0xf4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a44:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <SystemInit+0xf4>)
 8000a46:	4a1f      	ldr	r2, [pc, #124]	; (8000ac4 <SystemInit+0xfc>)
 8000a48:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <SystemInit+0xf4>)
 8000a4c:	4a1e      	ldr	r2, [pc, #120]	; (8000ac8 <SystemInit+0x100>)
 8000a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a50:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <SystemInit+0xf4>)
 8000a52:	4a1e      	ldr	r2, [pc, #120]	; (8000acc <SystemInit+0x104>)
 8000a54:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a56:	4b19      	ldr	r3, [pc, #100]	; (8000abc <SystemInit+0xf4>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a5c:	4b17      	ldr	r3, [pc, #92]	; (8000abc <SystemInit+0xf4>)
 8000a5e:	4a1b      	ldr	r2, [pc, #108]	; (8000acc <SystemInit+0x104>)
 8000a60:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a62:	4b16      	ldr	r3, [pc, #88]	; (8000abc <SystemInit+0xf4>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a68:	4b14      	ldr	r3, [pc, #80]	; (8000abc <SystemInit+0xf4>)
 8000a6a:	4a18      	ldr	r2, [pc, #96]	; (8000acc <SystemInit+0x104>)
 8000a6c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a6e:	4b13      	ldr	r3, [pc, #76]	; (8000abc <SystemInit+0xf4>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <SystemInit+0xf4>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a10      	ldr	r2, [pc, #64]	; (8000abc <SystemInit+0xf4>)
 8000a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a7e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a80:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <SystemInit+0xf4>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a86:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <SystemInit+0x108>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <SystemInit+0x10c>)
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a92:	d202      	bcs.n	8000a9a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a94:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <SystemInit+0x110>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <SystemInit+0x114>)
 8000a9c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000aa0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000aa2:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <SystemInit+0xec>)
 8000aa4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aa8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000ed00 	.word	0xe000ed00
 8000ab8:	52002000 	.word	0x52002000
 8000abc:	58024400 	.word	0x58024400
 8000ac0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ac4:	02020200 	.word	0x02020200
 8000ac8:	01ff0000 	.word	0x01ff0000
 8000acc:	01010280 	.word	0x01010280
 8000ad0:	5c001000 	.word	0x5c001000
 8000ad4:	ffff0000 	.word	0xffff0000
 8000ad8:	51008108 	.word	0x51008108
 8000adc:	52004000 	.word	0x52004000

08000ae0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ae0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b18 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ae4:	f7ff ff70 	bl	80009c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ae8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000aea:	e003      	b.n	8000af4 <LoopCopyDataInit>

08000aec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000aec:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000aee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000af0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000af2:	3104      	adds	r1, #4

08000af4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000af4:	480a      	ldr	r0, [pc, #40]	; (8000b20 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000af8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000afa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000afc:	d3f6      	bcc.n	8000aec <CopyDataInit>
  ldr  r2, =_sbss
 8000afe:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000b00:	e002      	b.n	8000b08 <LoopFillZerobss>

08000b02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b04:	f842 3b04 	str.w	r3, [r2], #4

08000b08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000b0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b0c:	d3f9      	bcc.n	8000b02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b0e:	f004 fd31 	bl	8005574 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b12:	f7ff fbe1 	bl	80002d8 <main>
  bx  lr    
 8000b16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b18:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8000b1c:	080055fc 	.word	0x080055fc
  ldr  r0, =_sdata
 8000b20:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8000b24:	24000014 	.word	0x24000014
  ldr  r2, =_sbss
 8000b28:	24000014 	.word	0x24000014
  ldr  r3, = _ebss
 8000b2c:	2400042c 	.word	0x2400042c

08000b30 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b30:	e7fe      	b.n	8000b30 <ADC3_IRQHandler>
	...

08000b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b3a:	2003      	movs	r0, #3
 8000b3c:	f000 f98a 	bl	8000e54 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b40:	f001 fbce 	bl	80022e0 <HAL_RCC_GetSysClockFreq>
 8000b44:	4601      	mov	r1, r0
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <HAL_Init+0x68>)
 8000b48:	699b      	ldr	r3, [r3, #24]
 8000b4a:	0a1b      	lsrs	r3, r3, #8
 8000b4c:	f003 030f 	and.w	r3, r3, #15
 8000b50:	4a13      	ldr	r2, [pc, #76]	; (8000ba0 <HAL_Init+0x6c>)
 8000b52:	5cd3      	ldrb	r3, [r2, r3]
 8000b54:	f003 031f 	and.w	r3, r3, #31
 8000b58:	fa21 f303 	lsr.w	r3, r1, r3
 8000b5c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <HAL_Init+0x68>)
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	f003 030f 	and.w	r3, r3, #15
 8000b66:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <HAL_Init+0x6c>)
 8000b68:	5cd3      	ldrb	r3, [r2, r3]
 8000b6a:	f003 031f 	and.w	r3, r3, #31
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	fa22 f303 	lsr.w	r3, r2, r3
 8000b74:	4a0b      	ldr	r2, [pc, #44]	; (8000ba4 <HAL_Init+0x70>)
 8000b76:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000b78:	4a0b      	ldr	r2, [pc, #44]	; (8000ba8 <HAL_Init+0x74>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f000 f814 	bl	8000bac <HAL_InitTick>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e002      	b.n	8000b94 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b8e:	f7ff fe05 	bl	800079c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b92:	2300      	movs	r3, #0
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	58024400 	.word	0x58024400
 8000ba0:	080055e4 	.word	0x080055e4
 8000ba4:	24000008 	.word	0x24000008
 8000ba8:	24000004 	.word	0x24000004

08000bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000bb4:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <HAL_InitTick+0x60>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d101      	bne.n	8000bc0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	e021      	b.n	8000c04 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <HAL_InitTick+0x64>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <HAL_InitTick+0x60>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 f96f 	bl	8000eba <HAL_SYSTICK_Config>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e00e      	b.n	8000c04 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2b0f      	cmp	r3, #15
 8000bea:	d80a      	bhi.n	8000c02 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bec:	2200      	movs	r2, #0
 8000bee:	6879      	ldr	r1, [r7, #4]
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	f000 f939 	bl	8000e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf8:	4a06      	ldr	r2, [pc, #24]	; (8000c14 <HAL_InitTick+0x68>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e000      	b.n	8000c04 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	24000010 	.word	0x24000010
 8000c10:	24000004 	.word	0x24000004
 8000c14:	2400000c 	.word	0x2400000c

08000c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_IncTick+0x20>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_IncTick+0x24>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4413      	add	r3, r2
 8000c28:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <HAL_IncTick+0x24>)
 8000c2a:	6013      	str	r3, [r2, #0]
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	24000010 	.word	0x24000010
 8000c3c:	24000428 	.word	0x24000428

08000c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return uwTick;
 8000c44:	4b03      	ldr	r3, [pc, #12]	; (8000c54 <HAL_GetTick+0x14>)
 8000c46:	681b      	ldr	r3, [r3, #0]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	24000428 	.word	0x24000428

08000c58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c60:	f7ff ffee 	bl	8000c40 <HAL_GetTick>
 8000c64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c70:	d005      	beq.n	8000c7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c72:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <HAL_Delay+0x40>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	461a      	mov	r2, r3
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c7e:	bf00      	nop
 8000c80:	f7ff ffde 	bl	8000c40 <HAL_GetTick>
 8000c84:	4602      	mov	r2, r0
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d8f7      	bhi.n	8000c80 <HAL_Delay+0x28>
  {
  }
}
 8000c90:	bf00      	nop
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	24000010 	.word	0x24000010

08000c9c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <HAL_GetREVID+0x14>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	0c1b      	lsrs	r3, r3, #16
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	5c001000 	.word	0x5c001000

08000cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc4:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <__NVIC_SetPriorityGrouping+0x40>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce2:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <__NVIC_SetPriorityGrouping+0x40>)
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	60d3      	str	r3, [r2, #12]
}
 8000ce8:	bf00      	nop
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00
 8000cf8:	05fa0000 	.word	0x05fa0000

08000cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <__NVIC_GetPriorityGrouping+0x18>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	0a1b      	lsrs	r3, r3, #8
 8000d06:	f003 0307 	and.w	r3, r3, #7
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	db0b      	blt.n	8000d42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2a:	88fb      	ldrh	r3, [r7, #6]
 8000d2c:	f003 021f 	and.w	r2, r3, #31
 8000d30:	4907      	ldr	r1, [pc, #28]	; (8000d50 <__NVIC_EnableIRQ+0x38>)
 8000d32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d36:	095b      	lsrs	r3, r3, #5
 8000d38:	2001      	movs	r0, #1
 8000d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000e100 	.word	0xe000e100

08000d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	db0a      	blt.n	8000d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	490c      	ldr	r1, [pc, #48]	; (8000da0 <__NVIC_SetPriority+0x4c>)
 8000d6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d72:	0112      	lsls	r2, r2, #4
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	440b      	add	r3, r1
 8000d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d7c:	e00a      	b.n	8000d94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4908      	ldr	r1, [pc, #32]	; (8000da4 <__NVIC_SetPriority+0x50>)
 8000d84:	88fb      	ldrh	r3, [r7, #6]
 8000d86:	f003 030f 	and.w	r3, r3, #15
 8000d8a:	3b04      	subs	r3, #4
 8000d8c:	0112      	lsls	r2, r2, #4
 8000d8e:	b2d2      	uxtb	r2, r2
 8000d90:	440b      	add	r3, r1
 8000d92:	761a      	strb	r2, [r3, #24]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000e100 	.word	0xe000e100
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b089      	sub	sp, #36	; 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f1c3 0307 	rsb	r3, r3, #7
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	bf28      	it	cs
 8000dc6:	2304      	movcs	r3, #4
 8000dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	2b06      	cmp	r3, #6
 8000dd0:	d902      	bls.n	8000dd8 <NVIC_EncodePriority+0x30>
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3b03      	subs	r3, #3
 8000dd6:	e000      	b.n	8000dda <NVIC_EncodePriority+0x32>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43da      	mvns	r2, r3
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	401a      	ands	r2, r3
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df0:	f04f 31ff 	mov.w	r1, #4294967295
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	43d9      	mvns	r1, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	4313      	orrs	r3, r2
         );
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3724      	adds	r7, #36	; 0x24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e20:	d301      	bcc.n	8000e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e22:	2301      	movs	r3, #1
 8000e24:	e00f      	b.n	8000e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e26:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <SysTick_Config+0x40>)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e2e:	210f      	movs	r1, #15
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295
 8000e34:	f7ff ff8e 	bl	8000d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <SysTick_Config+0x40>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3e:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <SysTick_Config+0x40>)
 8000e40:	2207      	movs	r2, #7
 8000e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	e000e010 	.word	0xe000e010

08000e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff ff29 	bl	8000cb4 <__NVIC_SetPriorityGrouping>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b086      	sub	sp, #24
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4603      	mov	r3, r0
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
 8000e76:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e78:	f7ff ff40 	bl	8000cfc <__NVIC_GetPriorityGrouping>
 8000e7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	68b9      	ldr	r1, [r7, #8]
 8000e82:	6978      	ldr	r0, [r7, #20]
 8000e84:	f7ff ff90 	bl	8000da8 <NVIC_EncodePriority>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e8e:	4611      	mov	r1, r2
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff ff5f 	bl	8000d54 <__NVIC_SetPriority>
}
 8000e96:	bf00      	nop
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ea8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ff33 	bl	8000d18 <__NVIC_EnableIRQ>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff ffa4 	bl	8000e10 <SysTick_Config>
 8000ec8:	4603      	mov	r3, r0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	; 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000ee2:	4b89      	ldr	r3, [pc, #548]	; (8001108 <HAL_GPIO_Init+0x234>)
 8000ee4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ee6:	e194      	b.n	8001212 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	2101      	movs	r1, #1
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f000 8186 	beq.w	800120c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d00b      	beq.n	8000f20 <HAL_GPIO_Init+0x4c>
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d007      	beq.n	8000f20 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f14:	2b11      	cmp	r3, #17
 8000f16:	d003      	beq.n	8000f20 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	2b12      	cmp	r3, #18
 8000f1e:	d130      	bne.n	8000f82 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	68da      	ldr	r2, [r3, #12]
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f56:	2201      	movs	r2, #1
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4013      	ands	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	091b      	lsrs	r3, r3, #4
 8000f6c:	f003 0201 	and.w	r2, r3, #1
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_Init+0xee>
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	2b12      	cmp	r3, #18
 8000fc0:	d123      	bne.n	800100a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	08da      	lsrs	r2, r3, #3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	3208      	adds	r2, #8
 8000fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	220f      	movs	r2, #15
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	691a      	ldr	r2, [r3, #16]
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	f003 0307 	and.w	r3, r3, #7
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	08da      	lsrs	r2, r3, #3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3208      	adds	r2, #8
 8001004:	69b9      	ldr	r1, [r7, #24]
 8001006:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	2203      	movs	r2, #3
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 0203 	and.w	r2, r3, #3
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4313      	orrs	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001046:	2b00      	cmp	r3, #0
 8001048:	f000 80e0 	beq.w	800120c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104c:	4b2f      	ldr	r3, [pc, #188]	; (800110c <HAL_GPIO_Init+0x238>)
 800104e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001052:	4a2e      	ldr	r2, [pc, #184]	; (800110c <HAL_GPIO_Init+0x238>)
 8001054:	f043 0302 	orr.w	r3, r3, #2
 8001058:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800105c:	4b2b      	ldr	r3, [pc, #172]	; (800110c <HAL_GPIO_Init+0x238>)
 800105e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800106a:	4a29      	ldr	r2, [pc, #164]	; (8001110 <HAL_GPIO_Init+0x23c>)
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	089b      	lsrs	r3, r3, #2
 8001070:	3302      	adds	r3, #2
 8001072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f003 0303 	and.w	r3, r3, #3
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	220f      	movs	r2, #15
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a20      	ldr	r2, [pc, #128]	; (8001114 <HAL_GPIO_Init+0x240>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d052      	beq.n	800113c <HAL_GPIO_Init+0x268>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a1f      	ldr	r2, [pc, #124]	; (8001118 <HAL_GPIO_Init+0x244>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d031      	beq.n	8001102 <HAL_GPIO_Init+0x22e>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a1e      	ldr	r2, [pc, #120]	; (800111c <HAL_GPIO_Init+0x248>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d02b      	beq.n	80010fe <HAL_GPIO_Init+0x22a>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a1d      	ldr	r2, [pc, #116]	; (8001120 <HAL_GPIO_Init+0x24c>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d025      	beq.n	80010fa <HAL_GPIO_Init+0x226>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a1c      	ldr	r2, [pc, #112]	; (8001124 <HAL_GPIO_Init+0x250>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d01f      	beq.n	80010f6 <HAL_GPIO_Init+0x222>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a1b      	ldr	r2, [pc, #108]	; (8001128 <HAL_GPIO_Init+0x254>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d019      	beq.n	80010f2 <HAL_GPIO_Init+0x21e>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a1a      	ldr	r2, [pc, #104]	; (800112c <HAL_GPIO_Init+0x258>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d013      	beq.n	80010ee <HAL_GPIO_Init+0x21a>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a19      	ldr	r2, [pc, #100]	; (8001130 <HAL_GPIO_Init+0x25c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d00d      	beq.n	80010ea <HAL_GPIO_Init+0x216>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a18      	ldr	r2, [pc, #96]	; (8001134 <HAL_GPIO_Init+0x260>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d007      	beq.n	80010e6 <HAL_GPIO_Init+0x212>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a17      	ldr	r2, [pc, #92]	; (8001138 <HAL_GPIO_Init+0x264>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d101      	bne.n	80010e2 <HAL_GPIO_Init+0x20e>
 80010de:	2309      	movs	r3, #9
 80010e0:	e02d      	b.n	800113e <HAL_GPIO_Init+0x26a>
 80010e2:	230a      	movs	r3, #10
 80010e4:	e02b      	b.n	800113e <HAL_GPIO_Init+0x26a>
 80010e6:	2308      	movs	r3, #8
 80010e8:	e029      	b.n	800113e <HAL_GPIO_Init+0x26a>
 80010ea:	2307      	movs	r3, #7
 80010ec:	e027      	b.n	800113e <HAL_GPIO_Init+0x26a>
 80010ee:	2306      	movs	r3, #6
 80010f0:	e025      	b.n	800113e <HAL_GPIO_Init+0x26a>
 80010f2:	2305      	movs	r3, #5
 80010f4:	e023      	b.n	800113e <HAL_GPIO_Init+0x26a>
 80010f6:	2304      	movs	r3, #4
 80010f8:	e021      	b.n	800113e <HAL_GPIO_Init+0x26a>
 80010fa:	2303      	movs	r3, #3
 80010fc:	e01f      	b.n	800113e <HAL_GPIO_Init+0x26a>
 80010fe:	2302      	movs	r3, #2
 8001100:	e01d      	b.n	800113e <HAL_GPIO_Init+0x26a>
 8001102:	2301      	movs	r3, #1
 8001104:	e01b      	b.n	800113e <HAL_GPIO_Init+0x26a>
 8001106:	bf00      	nop
 8001108:	58000080 	.word	0x58000080
 800110c:	58024400 	.word	0x58024400
 8001110:	58000400 	.word	0x58000400
 8001114:	58020000 	.word	0x58020000
 8001118:	58020400 	.word	0x58020400
 800111c:	58020800 	.word	0x58020800
 8001120:	58020c00 	.word	0x58020c00
 8001124:	58021000 	.word	0x58021000
 8001128:	58021400 	.word	0x58021400
 800112c:	58021800 	.word	0x58021800
 8001130:	58021c00 	.word	0x58021c00
 8001134:	58022000 	.word	0x58022000
 8001138:	58022400 	.word	0x58022400
 800113c:	2300      	movs	r3, #0
 800113e:	69fa      	ldr	r2, [r7, #28]
 8001140:	f002 0203 	and.w	r2, r2, #3
 8001144:	0092      	lsls	r2, r2, #2
 8001146:	4093      	lsls	r3, r2
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800114e:	4938      	ldr	r1, [pc, #224]	; (8001230 <HAL_GPIO_Init+0x35c>)
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	089b      	lsrs	r3, r3, #2
 8001154:	3302      	adds	r3, #2
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80011d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80011de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001204:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	3301      	adds	r3, #1
 8001210:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa22 f303 	lsr.w	r3, r2, r3
 800121c:	2b00      	cmp	r3, #0
 800121e:	f47f ae63 	bne.w	8000ee8 <HAL_GPIO_Init+0x14>
  }
}
 8001222:	bf00      	nop
 8001224:	3724      	adds	r7, #36	; 0x24
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	58000400 	.word	0x58000400

08001234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	807b      	strh	r3, [r7, #2]
 8001240:	4613      	mov	r3, r2
 8001242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001244:	787b      	ldrb	r3, [r7, #1]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800124a:	887a      	ldrh	r2, [r7, #2]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001250:	e003      	b.n	800125a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001252:	887b      	ldrh	r3, [r7, #2]
 8001254:	041a      	lsls	r2, r3, #16
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	619a      	str	r2, [r3, #24]
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e10b      	b.n	8001492 <HAL_I2S_Init+0x22a>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d106      	bne.n	8001294 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff fa9e 	bl	80007d0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2202      	movs	r2, #2
 8001298:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d107      	bne.n	80012ba <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f022 0201 	bic.w	r2, r2, #1
 80012b8:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2200      	movs	r2, #0
 80012c0:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	d008      	beq.n	80012dc <HAL_I2S_Init+0x74>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2b06      	cmp	r3, #6
 80012d0:	d004      	beq.n	80012dc <HAL_I2S_Init+0x74>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b0a      	cmp	r3, #10
 80012d8:	f040 8085 	bne.w	80013e6 <HAL_I2S_Init+0x17e>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	695b      	ldr	r3, [r3, #20]
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d058      	beq.n	8001396 <HAL_I2S_Init+0x12e>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d002      	beq.n	80012f2 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 80012ec:	2302      	movs	r3, #2
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	e001      	b.n	80012f6 <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 80012f2:	2301      	movs	r3, #1
 80012f4:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	2b30      	cmp	r3, #48	; 0x30
 80012fc:	d003      	beq.n	8001306 <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8001302:	2bb0      	cmp	r3, #176	; 0xb0
 8001304:	d102      	bne.n	800130c <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8001306:	2301      	movs	r3, #1
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	e001      	b.n	8001310 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8001310:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001314:	f002 f874 	bl	8003400 <HAL_RCCEx_GetPeriphCLKFreq>
 8001318:	60b8      	str	r0, [r7, #8]
#endif

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001322:	d113      	bne.n	800134c <HAL_I2S_Init+0xe4>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8001324:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	fa22 f303 	lsr.w	r3, r2, r3
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	fbb2 f2f3 	udiv	r2, r2, r3
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	461a      	mov	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	fbb2 f3f3 	udiv	r3, r2, r3
 8001346:	3305      	adds	r3, #5
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	e014      	b.n	8001376 <HAL_I2S_Init+0x10e>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 800134c:	2220      	movs	r2, #32
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	fa22 f303 	lsr.w	r3, r2, r3
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	fb02 f303 	mul.w	r3, r2, r3
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001360:	4613      	mov	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	461a      	mov	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001372:	3305      	adds	r3, #5
 8001374:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	4a48      	ldr	r2, [pc, #288]	; (800149c <HAL_I2S_Init+0x234>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	08db      	lsrs	r3, r3, #3
 8001380:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	085b      	lsrs	r3, r3, #1
 8001392:	61fb      	str	r3, [r7, #28]
 8001394:	e003      	b.n	800139e <HAL_I2S_Init+0x136>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8001396:	2302      	movs	r3, #2
 8001398:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d102      	bne.n	80013aa <HAL_I2S_Init+0x142>
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d002      	beq.n	80013b0 <HAL_I2S_Init+0x148>
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	2bff      	cmp	r3, #255	; 0xff
 80013ae:	d907      	bls.n	80013c0 <HAL_I2S_Init+0x158>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013b4:	f043 0210 	orr.w	r2, r3, #16
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e068      	b.n	8001492 <HAL_I2S_Init+0x22a>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <HAL_I2S_Init+0x162>
    {
      i2sodd = 1UL;
 80013c6:	2301      	movs	r3, #1
 80013c8:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013d0:	4b33      	ldr	r3, [pc, #204]	; (80014a0 <HAL_I2S_Init+0x238>)
 80013d2:	4013      	ands	r3, r2
 80013d4:	69fa      	ldr	r2, [r7, #28]
 80013d6:	0411      	lsls	r1, r2, #16
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	0612      	lsls	r2, r2, #24
 80013dc:	4311      	orrs	r1, r2
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	6812      	ldr	r2, [r2, #0]
 80013e2:	430b      	orrs	r3, r1
 80013e4:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013ec:	4b2d      	ldr	r3, [pc, #180]	; (80014a4 <HAL_I2S_Init+0x23c>)
 80013ee:	4013      	ands	r3, r2
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	6851      	ldr	r1, [r2, #4]
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	6892      	ldr	r2, [r2, #8]
 80013f8:	4311      	orrs	r1, r2
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	68d2      	ldr	r2, [r2, #12]
 80013fe:	4311      	orrs	r1, r2
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	6992      	ldr	r2, [r2, #24]
 8001404:	4311      	orrs	r1, r2
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	6a12      	ldr	r2, [r2, #32]
 800140a:	4311      	orrs	r1, r2
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001410:	4311      	orrs	r1, r2
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6912      	ldr	r2, [r2, #16]
 8001416:	430a      	orrs	r2, r1
 8001418:	431a      	orrs	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f042 0201 	orr.w	r2, r2, #1
 8001422:	651a      	str	r2, [r3, #80]	; 0x50
                                      (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
                                       hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
                                       hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
                                       hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f640 72f8 	movw	r2, #4088	; 0xff8
 800142c:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800143c:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69da      	ldr	r2, [r3, #28]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b04      	cmp	r3, #4
 800145a:	d007      	beq.n	800146c <HAL_I2S_Init+0x204>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b06      	cmp	r3, #6
 8001462:	d003      	beq.n	800146c <HAL_I2S_Init+0x204>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b0a      	cmp	r3, #10
 800146a:	d10a      	bne.n	8001482 <HAL_I2S_Init+0x21a>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	430a      	orrs	r2, r1
 8001480:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3720      	adds	r7, #32
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	cccccccd 	.word	0xcccccccd
 80014a0:	fe00ffff 	.word	0xfe00ffff
 80014a4:	fdff9040 	.word	0xfdff9040

080014a8 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	4613      	mov	r3, r2
 80014b6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hi2s->Instance->TXDR));
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	3320      	adds	r3, #32
 80014be:	617b      	str	r3, [r7, #20]
#endif /* __GNUC__ */

  if ((pData == NULL) || (Size == 0UL))
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d002      	beq.n	80014cc <HAL_I2S_Transmit+0x24>
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d101      	bne.n	80014d0 <HAL_I2S_Transmit+0x28>
  {
    return  HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e0ca      	b.n	8001666 <HAL_I2S_Transmit+0x1be>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d101      	bne.n	80014e0 <HAL_I2S_Transmit+0x38>
 80014dc:	2302      	movs	r3, #2
 80014de:	e0c2      	b.n	8001666 <HAL_I2S_Transmit+0x1be>
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  if (hi2s->State != HAL_I2S_STATE_READY)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d005      	beq.n	8001500 <HAL_I2S_Transmit+0x58>
  {
    __HAL_UNLOCK(hi2s);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_BUSY;
 80014fc:	2302      	movs	r3, #2
 80014fe:	e0b2      	b.n	8001666 <HAL_I2S_Transmit+0x1be>
  }

  /* Set state and reset error code */
  hi2s->State       = HAL_I2S_STATE_BUSY_TX;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2203      	movs	r2, #3
 8001504:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2200      	movs	r2, #0
 800150c:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->pTxBuffPtr  = pData;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	68ba      	ldr	r2, [r7, #8]
 8001512:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->TxXferSize  = Size;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	88fa      	ldrh	r2, [r7, #6]
 8001518:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2s->TxXferCount = Size;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	88fa      	ldrh	r2, [r7, #6]
 800151e:	865a      	strh	r2, [r3, #50]	; 0x32

  /* Initialize fields not used in handle to zero */
  hi2s->pRxBuffPtr  = NULL;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	635a      	str	r2, [r3, #52]	; 0x34
  hi2s->RxXferSize  = (uint16_t) 0UL;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2200      	movs	r2, #0
 800152a:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2s->RxXferCount = (uint16_t) 0UL;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2200      	movs	r2, #0
 8001530:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b01      	cmp	r3, #1
 800153e:	d007      	beq.n	8001550 <HAL_I2S_Transmit+0xa8>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f042 0201 	orr.w	r2, r2, #1
 800154e:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800155e:	601a      	str	r2, [r3, #0]


  /* Wait until TXP flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXP, SET, Timeout) != HAL_OK)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	2201      	movs	r2, #1
 8001564:	2102      	movs	r1, #2
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f000 f881 	bl	800166e <I2S_WaitFlagStateUntilTimeout>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d06b      	beq.n	800164a <HAL_I2S_Transmit+0x1a2>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001576:	f043 0201 	orr.w	r2, r3, #1
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2201      	movs	r2, #1
 8001582:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    __HAL_UNLOCK(hi2s);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e069      	b.n	8001666 <HAL_I2S_Transmit+0x1be>
  }

  while (hi2s->TxXferCount > 0UL)
  {
    if ((hi2s->Init.DataFormat == I2S_DATAFORMAT_24B) || (hi2s->Init.DataFormat == I2S_DATAFORMAT_32B))
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800159a:	d004      	beq.n	80015a6 <HAL_I2S_Transmit+0xfe>
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015a4:	d112      	bne.n	80015cc <HAL_I2S_Transmit+0x124>
    {
      /* Transmit data in 32 Bit mode */
      hi2s->Instance->TXDR = *((uint32_t *)hi2s->pTxBuffPtr);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6812      	ldr	r2, [r2, #0]
 80015b0:	621a      	str	r2, [r3, #32]
      hi2s->pTxBuffPtr += 2;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b6:	1d1a      	adds	r2, r3, #4
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2s->TxXferCount--;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	3b01      	subs	r3, #1
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	865a      	strh	r2, [r3, #50]	; 0x32
 80015ca:	e010      	b.n	80015ee <HAL_I2S_Transmit+0x146>
    }
    else
    {
      /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
      *ptxdr_16bits = *((uint16_t *)hi2s->pTxBuffPtr);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d0:	881a      	ldrh	r2, [r3, #0]
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	801a      	strh	r2, [r3, #0]
#else
      *((__IO uint16_t *)&hi2s->Instance->TXDR) = *((uint16_t *)hi2s->pTxBuffPtr);
#endif /* __GNUC__ */

      hi2s->pTxBuffPtr++;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015da:	1c9a      	adds	r2, r3, #2
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2s->TxXferCount--;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	3b01      	subs	r3, #1
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	865a      	strh	r2, [r3, #50]	; 0x32
    }

    /* Wait until TXP flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXP, SET, Timeout) != HAL_OK)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	2201      	movs	r2, #1
 80015f2:	2102      	movs	r1, #2
 80015f4:	68f8      	ldr	r0, [r7, #12]
 80015f6:	f000 f83a 	bl	800166e <I2S_WaitFlagStateUntilTimeout>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d00f      	beq.n	8001620 <HAL_I2S_Transmit+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001604:	f043 0201 	orr.w	r2, r3, #1
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	651a      	str	r2, [r3, #80]	; 0x50
      hi2s->State = HAL_I2S_STATE_READY;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      __HAL_UNLOCK(hi2s);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e022      	b.n	8001666 <HAL_I2S_Transmit+0x1be>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	f003 0320 	and.w	r3, r3, #32
 800162a:	2b20      	cmp	r3, #32
 800162c:	d10d      	bne.n	800164a <HAL_I2S_Transmit+0x1a2>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	699a      	ldr	r2, [r3, #24]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f042 0220 	orr.w	r2, r2, #32
 800163c:	619a      	str	r2, [r3, #24]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001642:	f043 0204 	orr.w	r2, r3, #4
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	651a      	str	r2, [r3, #80]	; 0x50
  while (hi2s->TxXferCount > 0UL)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800164e:	b29b      	uxth	r3, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	d19e      	bne.n	8001592 <HAL_I2S_Transmit+0xea>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  __HAL_UNLOCK(hi2s);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2200      	movs	r2, #0
 8001660:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <I2S_WaitFlagStateUntilTimeout>:
  * @param  State Value of the flag expected
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State, uint32_t Timeout)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b086      	sub	sp, #24
 8001672:	af00      	add	r7, sp, #0
 8001674:	60f8      	str	r0, [r7, #12]
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	603b      	str	r3, [r7, #0]
 800167a:	4613      	mov	r3, r2
 800167c:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800167e:	f7ff fadf 	bl	8000c40 <HAL_GetTick>
 8001682:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8001684:	e018      	b.n	80016b8 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800168c:	d014      	beq.n	80016b8 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0UL))
 800168e:	f7ff fad7 	bl	8000c40 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d902      	bls.n	80016a4 <I2S_WaitFlagStateUntilTimeout+0x36>
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d109      	bne.n	80016b8 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e00f      	b.n	80016d8 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	695a      	ldr	r2, [r3, #20]
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	4013      	ands	r3, r2
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	bf0c      	ite	eq
 80016c8:	2301      	moveq	r3, #1
 80016ca:	2300      	movne	r3, #0
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	461a      	mov	r2, r3
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d1d7      	bne.n	8001686 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80016e8:	4b19      	ldr	r3, [pc, #100]	; (8001750 <HAL_PWREx_ConfigSupply+0x70>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b04      	cmp	r3, #4
 80016f2:	d00a      	beq.n	800170a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80016f4:	4b16      	ldr	r3, [pc, #88]	; (8001750 <HAL_PWREx_ConfigSupply+0x70>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d001      	beq.n	8001706 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e01f      	b.n	8001746 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	e01d      	b.n	8001746 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <HAL_PWREx_ConfigSupply+0x70>)
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	f023 0207 	bic.w	r2, r3, #7
 8001712:	490f      	ldr	r1, [pc, #60]	; (8001750 <HAL_PWREx_ConfigSupply+0x70>)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4313      	orrs	r3, r2
 8001718:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800171a:	f7ff fa91 	bl	8000c40 <HAL_GetTick>
 800171e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001720:	e009      	b.n	8001736 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001722:	f7ff fa8d 	bl	8000c40 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001730:	d901      	bls.n	8001736 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e007      	b.n	8001746 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_PWREx_ConfigSupply+0x70>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800173e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001742:	d1ee      	bne.n	8001722 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	58024800 	.word	0x58024800

08001754 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08c      	sub	sp, #48	; 0x30
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e3ff      	b.n	8001f66 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b00      	cmp	r3, #0
 8001770:	f000 8087 	beq.w	8001882 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001774:	4b99      	ldr	r3, [pc, #612]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800177c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800177e:	4b97      	ldr	r3, [pc, #604]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 8001780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001786:	2b10      	cmp	r3, #16
 8001788:	d007      	beq.n	800179a <HAL_RCC_OscConfig+0x46>
 800178a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178c:	2b18      	cmp	r3, #24
 800178e:	d110      	bne.n	80017b2 <HAL_RCC_OscConfig+0x5e>
 8001790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001792:	f003 0303 	and.w	r3, r3, #3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d10b      	bne.n	80017b2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800179a:	4b90      	ldr	r3, [pc, #576]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d06c      	beq.n	8001880 <HAL_RCC_OscConfig+0x12c>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d168      	bne.n	8001880 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e3d9      	b.n	8001f66 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ba:	d106      	bne.n	80017ca <HAL_RCC_OscConfig+0x76>
 80017bc:	4b87      	ldr	r3, [pc, #540]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a86      	ldr	r2, [pc, #536]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 80017c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c6:	6013      	str	r3, [r2, #0]
 80017c8:	e02e      	b.n	8001828 <HAL_RCC_OscConfig+0xd4>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10c      	bne.n	80017ec <HAL_RCC_OscConfig+0x98>
 80017d2:	4b82      	ldr	r3, [pc, #520]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a81      	ldr	r2, [pc, #516]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 80017d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	4b7f      	ldr	r3, [pc, #508]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a7e      	ldr	r2, [pc, #504]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 80017e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	e01d      	b.n	8001828 <HAL_RCC_OscConfig+0xd4>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017f4:	d10c      	bne.n	8001810 <HAL_RCC_OscConfig+0xbc>
 80017f6:	4b79      	ldr	r3, [pc, #484]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a78      	ldr	r2, [pc, #480]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 80017fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001800:	6013      	str	r3, [r2, #0]
 8001802:	4b76      	ldr	r3, [pc, #472]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a75      	ldr	r2, [pc, #468]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 8001808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	e00b      	b.n	8001828 <HAL_RCC_OscConfig+0xd4>
 8001810:	4b72      	ldr	r3, [pc, #456]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a71      	ldr	r2, [pc, #452]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 8001816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	4b6f      	ldr	r3, [pc, #444]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a6e      	ldr	r2, [pc, #440]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 8001822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001826:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d013      	beq.n	8001858 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001830:	f7ff fa06 	bl	8000c40 <HAL_GetTick>
 8001834:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001838:	f7ff fa02 	bl	8000c40 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b64      	cmp	r3, #100	; 0x64
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e38d      	b.n	8001f66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800184a:	4b64      	ldr	r3, [pc, #400]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0f0      	beq.n	8001838 <HAL_RCC_OscConfig+0xe4>
 8001856:	e014      	b.n	8001882 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001858:	f7ff f9f2 	bl	8000c40 <HAL_GetTick>
 800185c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001860:	f7ff f9ee 	bl	8000c40 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b64      	cmp	r3, #100	; 0x64
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e379      	b.n	8001f66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001872:	4b5a      	ldr	r3, [pc, #360]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x10c>
 800187e:	e000      	b.n	8001882 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 80ae 	beq.w	80019ec <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001890:	4b52      	ldr	r3, [pc, #328]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001898:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800189a:	4b50      	ldr	r3, [pc, #320]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 800189c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80018a0:	6a3b      	ldr	r3, [r7, #32]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d007      	beq.n	80018b6 <HAL_RCC_OscConfig+0x162>
 80018a6:	6a3b      	ldr	r3, [r7, #32]
 80018a8:	2b18      	cmp	r3, #24
 80018aa:	d13a      	bne.n	8001922 <HAL_RCC_OscConfig+0x1ce>
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d135      	bne.n	8001922 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018b6:	4b49      	ldr	r3, [pc, #292]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d005      	beq.n	80018ce <HAL_RCC_OscConfig+0x17a>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e34b      	b.n	8001f66 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ce:	f7ff f9e5 	bl	8000c9c <HAL_GetREVID>
 80018d2:	4602      	mov	r2, r0
 80018d4:	f241 0303 	movw	r3, #4099	; 0x1003
 80018d8:	429a      	cmp	r2, r3
 80018da:	d817      	bhi.n	800190c <HAL_RCC_OscConfig+0x1b8>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	2b40      	cmp	r3, #64	; 0x40
 80018e2:	d108      	bne.n	80018f6 <HAL_RCC_OscConfig+0x1a2>
 80018e4:	4b3d      	ldr	r3, [pc, #244]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80018ec:	4a3b      	ldr	r2, [pc, #236]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 80018ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f4:	e07a      	b.n	80019ec <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f6:	4b39      	ldr	r3, [pc, #228]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	031b      	lsls	r3, r3, #12
 8001904:	4935      	ldr	r1, [pc, #212]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 8001906:	4313      	orrs	r3, r2
 8001908:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800190a:	e06f      	b.n	80019ec <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800190c:	4b33      	ldr	r3, [pc, #204]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	061b      	lsls	r3, r3, #24
 800191a:	4930      	ldr	r1, [pc, #192]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 800191c:	4313      	orrs	r3, r2
 800191e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001920:	e064      	b.n	80019ec <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d045      	beq.n	80019b6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800192a:	4b2c      	ldr	r3, [pc, #176]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f023 0219 	bic.w	r2, r3, #25
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	4929      	ldr	r1, [pc, #164]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 8001938:	4313      	orrs	r3, r2
 800193a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193c:	f7ff f980 	bl	8000c40 <HAL_GetTick>
 8001940:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001944:	f7ff f97c 	bl	8000c40 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e307      	b.n	8001f66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001956:	4b21      	ldr	r3, [pc, #132]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0f0      	beq.n	8001944 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001962:	f7ff f99b 	bl	8000c9c <HAL_GetREVID>
 8001966:	4602      	mov	r2, r0
 8001968:	f241 0303 	movw	r3, #4099	; 0x1003
 800196c:	429a      	cmp	r2, r3
 800196e:	d817      	bhi.n	80019a0 <HAL_RCC_OscConfig+0x24c>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	2b40      	cmp	r3, #64	; 0x40
 8001976:	d108      	bne.n	800198a <HAL_RCC_OscConfig+0x236>
 8001978:	4b18      	ldr	r3, [pc, #96]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001980:	4a16      	ldr	r2, [pc, #88]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 8001982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001986:	6053      	str	r3, [r2, #4]
 8001988:	e030      	b.n	80019ec <HAL_RCC_OscConfig+0x298>
 800198a:	4b14      	ldr	r3, [pc, #80]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	031b      	lsls	r3, r3, #12
 8001998:	4910      	ldr	r1, [pc, #64]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 800199a:	4313      	orrs	r3, r2
 800199c:	604b      	str	r3, [r1, #4]
 800199e:	e025      	b.n	80019ec <HAL_RCC_OscConfig+0x298>
 80019a0:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	061b      	lsls	r3, r3, #24
 80019ae:	490b      	ldr	r1, [pc, #44]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	604b      	str	r3, [r1, #4]
 80019b4:	e01a      	b.n	80019ec <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019b6:	4b09      	ldr	r3, [pc, #36]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a08      	ldr	r2, [pc, #32]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 80019bc:	f023 0301 	bic.w	r3, r3, #1
 80019c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c2:	f7ff f93d 	bl	8000c40 <HAL_GetTick>
 80019c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019c8:	e00a      	b.n	80019e0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ca:	f7ff f939 	bl	8000c40 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d903      	bls.n	80019e0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e2c4      	b.n	8001f66 <HAL_RCC_OscConfig+0x812>
 80019dc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019e0:	4ba4      	ldr	r3, [pc, #656]	; (8001c74 <HAL_RCC_OscConfig+0x520>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1ee      	bne.n	80019ca <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0310 	and.w	r3, r3, #16
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 80a9 	beq.w	8001b4c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019fa:	4b9e      	ldr	r3, [pc, #632]	; (8001c74 <HAL_RCC_OscConfig+0x520>)
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a02:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a04:	4b9b      	ldr	r3, [pc, #620]	; (8001c74 <HAL_RCC_OscConfig+0x520>)
 8001a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a08:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d007      	beq.n	8001a20 <HAL_RCC_OscConfig+0x2cc>
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	2b18      	cmp	r3, #24
 8001a14:	d13a      	bne.n	8001a8c <HAL_RCC_OscConfig+0x338>
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d135      	bne.n	8001a8c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a20:	4b94      	ldr	r3, [pc, #592]	; (8001c74 <HAL_RCC_OscConfig+0x520>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d005      	beq.n	8001a38 <HAL_RCC_OscConfig+0x2e4>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	2b80      	cmp	r3, #128	; 0x80
 8001a32:	d001      	beq.n	8001a38 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e296      	b.n	8001f66 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a38:	f7ff f930 	bl	8000c9c <HAL_GetREVID>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	f241 0303 	movw	r3, #4099	; 0x1003
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d817      	bhi.n	8001a76 <HAL_RCC_OscConfig+0x322>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	2b20      	cmp	r3, #32
 8001a4c:	d108      	bne.n	8001a60 <HAL_RCC_OscConfig+0x30c>
 8001a4e:	4b89      	ldr	r3, [pc, #548]	; (8001c74 <HAL_RCC_OscConfig+0x520>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001a56:	4a87      	ldr	r2, [pc, #540]	; (8001c74 <HAL_RCC_OscConfig+0x520>)
 8001a58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a5c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a5e:	e075      	b.n	8001b4c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a60:	4b84      	ldr	r3, [pc, #528]	; (8001c74 <HAL_RCC_OscConfig+0x520>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	069b      	lsls	r3, r3, #26
 8001a6e:	4981      	ldr	r1, [pc, #516]	; (8001c74 <HAL_RCC_OscConfig+0x520>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a74:	e06a      	b.n	8001b4c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a76:	4b7f      	ldr	r3, [pc, #508]	; (8001c74 <HAL_RCC_OscConfig+0x520>)
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	061b      	lsls	r3, r3, #24
 8001a84:	497b      	ldr	r1, [pc, #492]	; (8001c74 <HAL_RCC_OscConfig+0x520>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a8a:	e05f      	b.n	8001b4c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d042      	beq.n	8001b1a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001a94:	4b77      	ldr	r3, [pc, #476]	; (8001c74 <HAL_RCC_OscConfig+0x520>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a76      	ldr	r2, [pc, #472]	; (8001c74 <HAL_RCC_OscConfig+0x520>)
 8001a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa0:	f7ff f8ce 	bl	8000c40 <HAL_GetTick>
 8001aa4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001aa8:	f7ff f8ca 	bl	8000c40 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e255      	b.n	8001f66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001aba:	4b6e      	ldr	r3, [pc, #440]	; (8001c74 <HAL_RCC_OscConfig+0x520>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ac6:	f7ff f8e9 	bl	8000c9c <HAL_GetREVID>
 8001aca:	4602      	mov	r2, r0
 8001acc:	f241 0303 	movw	r3, #4099	; 0x1003
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d817      	bhi.n	8001b04 <HAL_RCC_OscConfig+0x3b0>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	2b20      	cmp	r3, #32
 8001ada:	d108      	bne.n	8001aee <HAL_RCC_OscConfig+0x39a>
 8001adc:	4b65      	ldr	r3, [pc, #404]	; (8001c74 <HAL_RCC_OscConfig+0x520>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001ae4:	4a63      	ldr	r2, [pc, #396]	; (8001c74 <HAL_RCC_OscConfig+0x520>)
 8001ae6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001aea:	6053      	str	r3, [r2, #4]
 8001aec:	e02e      	b.n	8001b4c <HAL_RCC_OscConfig+0x3f8>
 8001aee:	4b61      	ldr	r3, [pc, #388]	; (8001c74 <HAL_RCC_OscConfig+0x520>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	069b      	lsls	r3, r3, #26
 8001afc:	495d      	ldr	r1, [pc, #372]	; (8001c74 <HAL_RCC_OscConfig+0x520>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	604b      	str	r3, [r1, #4]
 8001b02:	e023      	b.n	8001b4c <HAL_RCC_OscConfig+0x3f8>
 8001b04:	4b5b      	ldr	r3, [pc, #364]	; (8001c74 <HAL_RCC_OscConfig+0x520>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	061b      	lsls	r3, r3, #24
 8001b12:	4958      	ldr	r1, [pc, #352]	; (8001c74 <HAL_RCC_OscConfig+0x520>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	60cb      	str	r3, [r1, #12]
 8001b18:	e018      	b.n	8001b4c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001b1a:	4b56      	ldr	r3, [pc, #344]	; (8001c74 <HAL_RCC_OscConfig+0x520>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a55      	ldr	r2, [pc, #340]	; (8001c74 <HAL_RCC_OscConfig+0x520>)
 8001b20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b26:	f7ff f88b 	bl	8000c40 <HAL_GetTick>
 8001b2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001b2e:	f7ff f887 	bl	8000c40 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e212      	b.n	8001f66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b40:	4b4c      	ldr	r3, [pc, #304]	; (8001c74 <HAL_RCC_OscConfig+0x520>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1f0      	bne.n	8001b2e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d036      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	695b      	ldr	r3, [r3, #20]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d019      	beq.n	8001b94 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b60:	4b44      	ldr	r3, [pc, #272]	; (8001c74 <HAL_RCC_OscConfig+0x520>)
 8001b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b64:	4a43      	ldr	r2, [pc, #268]	; (8001c74 <HAL_RCC_OscConfig+0x520>)
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6c:	f7ff f868 	bl	8000c40 <HAL_GetTick>
 8001b70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b74:	f7ff f864 	bl	8000c40 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e1ef      	b.n	8001f66 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b86:	4b3b      	ldr	r3, [pc, #236]	; (8001c74 <HAL_RCC_OscConfig+0x520>)
 8001b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCC_OscConfig+0x420>
 8001b92:	e018      	b.n	8001bc6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b94:	4b37      	ldr	r3, [pc, #220]	; (8001c74 <HAL_RCC_OscConfig+0x520>)
 8001b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b98:	4a36      	ldr	r2, [pc, #216]	; (8001c74 <HAL_RCC_OscConfig+0x520>)
 8001b9a:	f023 0301 	bic.w	r3, r3, #1
 8001b9e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba0:	f7ff f84e 	bl	8000c40 <HAL_GetTick>
 8001ba4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ba8:	f7ff f84a 	bl	8000c40 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e1d5      	b.n	8001f66 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bba:	4b2e      	ldr	r3, [pc, #184]	; (8001c74 <HAL_RCC_OscConfig+0x520>)
 8001bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f0      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0320 	and.w	r3, r3, #32
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d036      	beq.n	8001c40 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d019      	beq.n	8001c0e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bda:	4b26      	ldr	r3, [pc, #152]	; (8001c74 <HAL_RCC_OscConfig+0x520>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a25      	ldr	r2, [pc, #148]	; (8001c74 <HAL_RCC_OscConfig+0x520>)
 8001be0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001be4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001be6:	f7ff f82b 	bl	8000c40 <HAL_GetTick>
 8001bea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001bee:	f7ff f827 	bl	8000c40 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e1b2      	b.n	8001f66 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c00:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <HAL_RCC_OscConfig+0x520>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0f0      	beq.n	8001bee <HAL_RCC_OscConfig+0x49a>
 8001c0c:	e018      	b.n	8001c40 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c0e:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <HAL_RCC_OscConfig+0x520>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a18      	ldr	r2, [pc, #96]	; (8001c74 <HAL_RCC_OscConfig+0x520>)
 8001c14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c18:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c1a:	f7ff f811 	bl	8000c40 <HAL_GetTick>
 8001c1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001c22:	f7ff f80d 	bl	8000c40 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e198      	b.n	8001f66 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c34:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <HAL_RCC_OscConfig+0x520>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1f0      	bne.n	8001c22 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 8085 	beq.w	8001d58 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <HAL_RCC_OscConfig+0x524>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a09      	ldr	r2, [pc, #36]	; (8001c78 <HAL_RCC_OscConfig+0x524>)
 8001c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c5a:	f7fe fff1 	bl	8000c40 <HAL_GetTick>
 8001c5e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c60:	e00c      	b.n	8001c7c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001c62:	f7fe ffed 	bl	8000c40 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b64      	cmp	r3, #100	; 0x64
 8001c6e:	d905      	bls.n	8001c7c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e178      	b.n	8001f66 <HAL_RCC_OscConfig+0x812>
 8001c74:	58024400 	.word	0x58024400
 8001c78:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c7c:	4b96      	ldr	r3, [pc, #600]	; (8001ed8 <HAL_RCC_OscConfig+0x784>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0ec      	beq.n	8001c62 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d106      	bne.n	8001c9e <HAL_RCC_OscConfig+0x54a>
 8001c90:	4b92      	ldr	r3, [pc, #584]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c94:	4a91      	ldr	r2, [pc, #580]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c9c:	e02d      	b.n	8001cfa <HAL_RCC_OscConfig+0x5a6>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x56c>
 8001ca6:	4b8d      	ldr	r3, [pc, #564]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001caa:	4a8c      	ldr	r2, [pc, #560]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb2:	4b8a      	ldr	r3, [pc, #552]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb6:	4a89      	ldr	r2, [pc, #548]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001cb8:	f023 0304 	bic.w	r3, r3, #4
 8001cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8001cbe:	e01c      	b.n	8001cfa <HAL_RCC_OscConfig+0x5a6>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2b05      	cmp	r3, #5
 8001cc6:	d10c      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x58e>
 8001cc8:	4b84      	ldr	r3, [pc, #528]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ccc:	4a83      	ldr	r2, [pc, #524]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001cce:	f043 0304 	orr.w	r3, r3, #4
 8001cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd4:	4b81      	ldr	r3, [pc, #516]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd8:	4a80      	ldr	r2, [pc, #512]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce0:	e00b      	b.n	8001cfa <HAL_RCC_OscConfig+0x5a6>
 8001ce2:	4b7e      	ldr	r3, [pc, #504]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce6:	4a7d      	ldr	r2, [pc, #500]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001ce8:	f023 0301 	bic.w	r3, r3, #1
 8001cec:	6713      	str	r3, [r2, #112]	; 0x70
 8001cee:	4b7b      	ldr	r3, [pc, #492]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf2:	4a7a      	ldr	r2, [pc, #488]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001cf4:	f023 0304 	bic.w	r3, r3, #4
 8001cf8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d015      	beq.n	8001d2e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d02:	f7fe ff9d 	bl	8000c40 <HAL_GetTick>
 8001d06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d08:	e00a      	b.n	8001d20 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d0a:	f7fe ff99 	bl	8000c40 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e122      	b.n	8001f66 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d20:	4b6e      	ldr	r3, [pc, #440]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0ee      	beq.n	8001d0a <HAL_RCC_OscConfig+0x5b6>
 8001d2c:	e014      	b.n	8001d58 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2e:	f7fe ff87 	bl	8000c40 <HAL_GetTick>
 8001d32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d34:	e00a      	b.n	8001d4c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d36:	f7fe ff83 	bl	8000c40 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e10c      	b.n	8001f66 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d4c:	4b63      	ldr	r3, [pc, #396]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1ee      	bne.n	8001d36 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 8101 	beq.w	8001f64 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001d62:	4b5e      	ldr	r3, [pc, #376]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d6a:	2b18      	cmp	r3, #24
 8001d6c:	f000 80bc 	beq.w	8001ee8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	f040 8095 	bne.w	8001ea4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d7a:	4b58      	ldr	r3, [pc, #352]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a57      	ldr	r2, [pc, #348]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001d80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d86:	f7fe ff5b 	bl	8000c40 <HAL_GetTick>
 8001d8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d8e:	f7fe ff57 	bl	8000c40 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e0e2      	b.n	8001f66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001da0:	4b4e      	ldr	r3, [pc, #312]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1f0      	bne.n	8001d8e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dac:	4b4b      	ldr	r3, [pc, #300]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001dae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001db0:	4b4b      	ldr	r3, [pc, #300]	; (8001ee0 <HAL_RCC_OscConfig+0x78c>)
 8001db2:	4013      	ands	r3, r2
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001dbc:	0112      	lsls	r2, r2, #4
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	4946      	ldr	r1, [pc, #280]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	628b      	str	r3, [r1, #40]	; 0x28
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	025b      	lsls	r3, r3, #9
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de0:	3b01      	subs	r3, #1
 8001de2:	041b      	lsls	r3, r3, #16
 8001de4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001de8:	431a      	orrs	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dee:	3b01      	subs	r3, #1
 8001df0:	061b      	lsls	r3, r3, #24
 8001df2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001df6:	4939      	ldr	r1, [pc, #228]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001dfc:	4b37      	ldr	r3, [pc, #220]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e00:	4a36      	ldr	r2, [pc, #216]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001e02:	f023 0301 	bic.w	r3, r3, #1
 8001e06:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e08:	4b34      	ldr	r3, [pc, #208]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001e0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e0c:	4b35      	ldr	r3, [pc, #212]	; (8001ee4 <HAL_RCC_OscConfig+0x790>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e14:	00d2      	lsls	r2, r2, #3
 8001e16:	4931      	ldr	r1, [pc, #196]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001e1c:	4b2f      	ldr	r3, [pc, #188]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e20:	f023 020c 	bic.w	r2, r3, #12
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e28:	492c      	ldr	r1, [pc, #176]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001e2e:	4b2b      	ldr	r3, [pc, #172]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e32:	f023 0202 	bic.w	r2, r3, #2
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3a:	4928      	ldr	r1, [pc, #160]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001e40:	4b26      	ldr	r3, [pc, #152]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e44:	4a25      	ldr	r2, [pc, #148]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e4c:	4b23      	ldr	r3, [pc, #140]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e50:	4a22      	ldr	r2, [pc, #136]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001e52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001e58:	4b20      	ldr	r3, [pc, #128]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5c:	4a1f      	ldr	r2, [pc, #124]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001e5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001e64:	4b1d      	ldr	r3, [pc, #116]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e68:	4a1c      	ldr	r2, [pc, #112]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e70:	4b1a      	ldr	r3, [pc, #104]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a19      	ldr	r2, [pc, #100]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001e76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7c:	f7fe fee0 	bl	8000c40 <HAL_GetTick>
 8001e80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e84:	f7fe fedc 	bl	8000c40 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e067      	b.n	8001f66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e96:	4b11      	ldr	r3, [pc, #68]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCC_OscConfig+0x730>
 8001ea2:	e05f      	b.n	8001f64 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea4:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a0c      	ldr	r2, [pc, #48]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001eaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb0:	f7fe fec6 	bl	8000c40 <HAL_GetTick>
 8001eb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb8:	f7fe fec2 	bl	8000c40 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e04d      	b.n	8001f66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001eca:	4b04      	ldr	r3, [pc, #16]	; (8001edc <HAL_RCC_OscConfig+0x788>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x764>
 8001ed6:	e045      	b.n	8001f64 <HAL_RCC_OscConfig+0x810>
 8001ed8:	58024800 	.word	0x58024800
 8001edc:	58024400 	.word	0x58024400
 8001ee0:	fffffc0c 	.word	0xfffffc0c
 8001ee4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001ee8:	4b21      	ldr	r3, [pc, #132]	; (8001f70 <HAL_RCC_OscConfig+0x81c>)
 8001eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001eee:	4b20      	ldr	r3, [pc, #128]	; (8001f70 <HAL_RCC_OscConfig+0x81c>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d031      	beq.n	8001f60 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	f003 0203 	and.w	r2, r3, #3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d12a      	bne.n	8001f60 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	091b      	lsrs	r3, r3, #4
 8001f0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d122      	bne.n	8001f60 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f24:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d11a      	bne.n	8001f60 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	0a5b      	lsrs	r3, r3, #9
 8001f2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f36:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d111      	bne.n	8001f60 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	0c1b      	lsrs	r3, r3, #16
 8001f40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f48:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d108      	bne.n	8001f60 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	0e1b      	lsrs	r3, r3, #24
 8001f52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d001      	beq.n	8001f64 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e000      	b.n	8001f66 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3730      	adds	r7, #48	; 0x30
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	58024400 	.word	0x58024400

08001f74 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e19c      	b.n	80022c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f88:	4b8a      	ldr	r3, [pc, #552]	; (80021b4 <HAL_RCC_ClockConfig+0x240>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 030f 	and.w	r3, r3, #15
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d910      	bls.n	8001fb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f96:	4b87      	ldr	r3, [pc, #540]	; (80021b4 <HAL_RCC_ClockConfig+0x240>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f023 020f 	bic.w	r2, r3, #15
 8001f9e:	4985      	ldr	r1, [pc, #532]	; (80021b4 <HAL_RCC_ClockConfig+0x240>)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa6:	4b83      	ldr	r3, [pc, #524]	; (80021b4 <HAL_RCC_ClockConfig+0x240>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d001      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e184      	b.n	80022c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d010      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691a      	ldr	r2, [r3, #16]
 8001fc8:	4b7b      	ldr	r3, [pc, #492]	; (80021b8 <HAL_RCC_ClockConfig+0x244>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d908      	bls.n	8001fe6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001fd4:	4b78      	ldr	r3, [pc, #480]	; (80021b8 <HAL_RCC_ClockConfig+0x244>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	4975      	ldr	r1, [pc, #468]	; (80021b8 <HAL_RCC_ClockConfig+0x244>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d010      	beq.n	8002014 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	695a      	ldr	r2, [r3, #20]
 8001ff6:	4b70      	ldr	r3, [pc, #448]	; (80021b8 <HAL_RCC_ClockConfig+0x244>)
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d908      	bls.n	8002014 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002002:	4b6d      	ldr	r3, [pc, #436]	; (80021b8 <HAL_RCC_ClockConfig+0x244>)
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	496a      	ldr	r1, [pc, #424]	; (80021b8 <HAL_RCC_ClockConfig+0x244>)
 8002010:	4313      	orrs	r3, r2
 8002012:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0310 	and.w	r3, r3, #16
 800201c:	2b00      	cmp	r3, #0
 800201e:	d010      	beq.n	8002042 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	699a      	ldr	r2, [r3, #24]
 8002024:	4b64      	ldr	r3, [pc, #400]	; (80021b8 <HAL_RCC_ClockConfig+0x244>)
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800202c:	429a      	cmp	r2, r3
 800202e:	d908      	bls.n	8002042 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002030:	4b61      	ldr	r3, [pc, #388]	; (80021b8 <HAL_RCC_ClockConfig+0x244>)
 8002032:	69db      	ldr	r3, [r3, #28]
 8002034:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	495e      	ldr	r1, [pc, #376]	; (80021b8 <HAL_RCC_ClockConfig+0x244>)
 800203e:	4313      	orrs	r3, r2
 8002040:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0320 	and.w	r3, r3, #32
 800204a:	2b00      	cmp	r3, #0
 800204c:	d010      	beq.n	8002070 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69da      	ldr	r2, [r3, #28]
 8002052:	4b59      	ldr	r3, [pc, #356]	; (80021b8 <HAL_RCC_ClockConfig+0x244>)
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800205a:	429a      	cmp	r2, r3
 800205c:	d908      	bls.n	8002070 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800205e:	4b56      	ldr	r3, [pc, #344]	; (80021b8 <HAL_RCC_ClockConfig+0x244>)
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	4953      	ldr	r1, [pc, #332]	; (80021b8 <HAL_RCC_ClockConfig+0x244>)
 800206c:	4313      	orrs	r3, r2
 800206e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d010      	beq.n	800209e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	4b4d      	ldr	r3, [pc, #308]	; (80021b8 <HAL_RCC_ClockConfig+0x244>)
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	f003 030f 	and.w	r3, r3, #15
 8002088:	429a      	cmp	r2, r3
 800208a:	d908      	bls.n	800209e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800208c:	4b4a      	ldr	r3, [pc, #296]	; (80021b8 <HAL_RCC_ClockConfig+0x244>)
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	f023 020f 	bic.w	r2, r3, #15
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	4947      	ldr	r1, [pc, #284]	; (80021b8 <HAL_RCC_ClockConfig+0x244>)
 800209a:	4313      	orrs	r3, r2
 800209c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d055      	beq.n	8002156 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80020aa:	4b43      	ldr	r3, [pc, #268]	; (80021b8 <HAL_RCC_ClockConfig+0x244>)
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	4940      	ldr	r1, [pc, #256]	; (80021b8 <HAL_RCC_ClockConfig+0x244>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d107      	bne.n	80020d4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020c4:	4b3c      	ldr	r3, [pc, #240]	; (80021b8 <HAL_RCC_ClockConfig+0x244>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d121      	bne.n	8002114 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e0f6      	b.n	80022c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b03      	cmp	r3, #3
 80020da:	d107      	bne.n	80020ec <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020dc:	4b36      	ldr	r3, [pc, #216]	; (80021b8 <HAL_RCC_ClockConfig+0x244>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d115      	bne.n	8002114 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e0ea      	b.n	80022c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d107      	bne.n	8002104 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020f4:	4b30      	ldr	r3, [pc, #192]	; (80021b8 <HAL_RCC_ClockConfig+0x244>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d109      	bne.n	8002114 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e0de      	b.n	80022c2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002104:	4b2c      	ldr	r3, [pc, #176]	; (80021b8 <HAL_RCC_ClockConfig+0x244>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e0d6      	b.n	80022c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002114:	4b28      	ldr	r3, [pc, #160]	; (80021b8 <HAL_RCC_ClockConfig+0x244>)
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	f023 0207 	bic.w	r2, r3, #7
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	4925      	ldr	r1, [pc, #148]	; (80021b8 <HAL_RCC_ClockConfig+0x244>)
 8002122:	4313      	orrs	r3, r2
 8002124:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002126:	f7fe fd8b 	bl	8000c40 <HAL_GetTick>
 800212a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212c:	e00a      	b.n	8002144 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800212e:	f7fe fd87 	bl	8000c40 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	f241 3288 	movw	r2, #5000	; 0x1388
 800213c:	4293      	cmp	r3, r2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e0be      	b.n	80022c2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002144:	4b1c      	ldr	r3, [pc, #112]	; (80021b8 <HAL_RCC_ClockConfig+0x244>)
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	429a      	cmp	r2, r3
 8002154:	d1eb      	bne.n	800212e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d010      	beq.n	8002184 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <HAL_RCC_ClockConfig+0x244>)
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	429a      	cmp	r2, r3
 8002170:	d208      	bcs.n	8002184 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002172:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <HAL_RCC_ClockConfig+0x244>)
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	f023 020f 	bic.w	r2, r3, #15
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	490e      	ldr	r1, [pc, #56]	; (80021b8 <HAL_RCC_ClockConfig+0x244>)
 8002180:	4313      	orrs	r3, r2
 8002182:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_RCC_ClockConfig+0x240>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 030f 	and.w	r3, r3, #15
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	429a      	cmp	r2, r3
 8002190:	d214      	bcs.n	80021bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002192:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <HAL_RCC_ClockConfig+0x240>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f023 020f 	bic.w	r2, r3, #15
 800219a:	4906      	ldr	r1, [pc, #24]	; (80021b4 <HAL_RCC_ClockConfig+0x240>)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	4313      	orrs	r3, r2
 80021a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a2:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <HAL_RCC_ClockConfig+0x240>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d005      	beq.n	80021bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e086      	b.n	80022c2 <HAL_RCC_ClockConfig+0x34e>
 80021b4:	52002000 	.word	0x52002000
 80021b8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d010      	beq.n	80021ea <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691a      	ldr	r2, [r3, #16]
 80021cc:	4b3f      	ldr	r3, [pc, #252]	; (80022cc <HAL_RCC_ClockConfig+0x358>)
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d208      	bcs.n	80021ea <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80021d8:	4b3c      	ldr	r3, [pc, #240]	; (80022cc <HAL_RCC_ClockConfig+0x358>)
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	4939      	ldr	r1, [pc, #228]	; (80022cc <HAL_RCC_ClockConfig+0x358>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d010      	beq.n	8002218 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	695a      	ldr	r2, [r3, #20]
 80021fa:	4b34      	ldr	r3, [pc, #208]	; (80022cc <HAL_RCC_ClockConfig+0x358>)
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002202:	429a      	cmp	r2, r3
 8002204:	d208      	bcs.n	8002218 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002206:	4b31      	ldr	r3, [pc, #196]	; (80022cc <HAL_RCC_ClockConfig+0x358>)
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	492e      	ldr	r1, [pc, #184]	; (80022cc <HAL_RCC_ClockConfig+0x358>)
 8002214:	4313      	orrs	r3, r2
 8002216:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0310 	and.w	r3, r3, #16
 8002220:	2b00      	cmp	r3, #0
 8002222:	d010      	beq.n	8002246 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	699a      	ldr	r2, [r3, #24]
 8002228:	4b28      	ldr	r3, [pc, #160]	; (80022cc <HAL_RCC_ClockConfig+0x358>)
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002230:	429a      	cmp	r2, r3
 8002232:	d208      	bcs.n	8002246 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002234:	4b25      	ldr	r3, [pc, #148]	; (80022cc <HAL_RCC_ClockConfig+0x358>)
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	4922      	ldr	r1, [pc, #136]	; (80022cc <HAL_RCC_ClockConfig+0x358>)
 8002242:	4313      	orrs	r3, r2
 8002244:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0320 	and.w	r3, r3, #32
 800224e:	2b00      	cmp	r3, #0
 8002250:	d010      	beq.n	8002274 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69da      	ldr	r2, [r3, #28]
 8002256:	4b1d      	ldr	r3, [pc, #116]	; (80022cc <HAL_RCC_ClockConfig+0x358>)
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800225e:	429a      	cmp	r2, r3
 8002260:	d208      	bcs.n	8002274 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002262:	4b1a      	ldr	r3, [pc, #104]	; (80022cc <HAL_RCC_ClockConfig+0x358>)
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	4917      	ldr	r1, [pc, #92]	; (80022cc <HAL_RCC_ClockConfig+0x358>)
 8002270:	4313      	orrs	r3, r2
 8002272:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002274:	f000 f834 	bl	80022e0 <HAL_RCC_GetSysClockFreq>
 8002278:	4601      	mov	r1, r0
 800227a:	4b14      	ldr	r3, [pc, #80]	; (80022cc <HAL_RCC_ClockConfig+0x358>)
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	0a1b      	lsrs	r3, r3, #8
 8002280:	f003 030f 	and.w	r3, r3, #15
 8002284:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <HAL_RCC_ClockConfig+0x35c>)
 8002286:	5cd3      	ldrb	r3, [r2, r3]
 8002288:	f003 031f 	and.w	r3, r3, #31
 800228c:	fa21 f303 	lsr.w	r3, r1, r3
 8002290:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002292:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <HAL_RCC_ClockConfig+0x358>)
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	4a0d      	ldr	r2, [pc, #52]	; (80022d0 <HAL_RCC_ClockConfig+0x35c>)
 800229c:	5cd3      	ldrb	r3, [r2, r3]
 800229e:	f003 031f 	and.w	r3, r3, #31
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	fa22 f303 	lsr.w	r3, r2, r3
 80022a8:	4a0a      	ldr	r2, [pc, #40]	; (80022d4 <HAL_RCC_ClockConfig+0x360>)
 80022aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022ac:	4a0a      	ldr	r2, [pc, #40]	; (80022d8 <HAL_RCC_ClockConfig+0x364>)
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80022b2:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <HAL_RCC_ClockConfig+0x368>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe fc78 	bl	8000bac <HAL_InitTick>
 80022bc:	4603      	mov	r3, r0
 80022be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	58024400 	.word	0x58024400
 80022d0:	080055e4 	.word	0x080055e4
 80022d4:	24000008 	.word	0x24000008
 80022d8:	24000004 	.word	0x24000004
 80022dc:	2400000c 	.word	0x2400000c

080022e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b089      	sub	sp, #36	; 0x24
 80022e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022e6:	4baf      	ldr	r3, [pc, #700]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022ee:	2b18      	cmp	r3, #24
 80022f0:	f200 814e 	bhi.w	8002590 <HAL_RCC_GetSysClockFreq+0x2b0>
 80022f4:	a201      	add	r2, pc, #4	; (adr r2, 80022fc <HAL_RCC_GetSysClockFreq+0x1c>)
 80022f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022fa:	bf00      	nop
 80022fc:	08002361 	.word	0x08002361
 8002300:	08002591 	.word	0x08002591
 8002304:	08002591 	.word	0x08002591
 8002308:	08002591 	.word	0x08002591
 800230c:	08002591 	.word	0x08002591
 8002310:	08002591 	.word	0x08002591
 8002314:	08002591 	.word	0x08002591
 8002318:	08002591 	.word	0x08002591
 800231c:	08002387 	.word	0x08002387
 8002320:	08002591 	.word	0x08002591
 8002324:	08002591 	.word	0x08002591
 8002328:	08002591 	.word	0x08002591
 800232c:	08002591 	.word	0x08002591
 8002330:	08002591 	.word	0x08002591
 8002334:	08002591 	.word	0x08002591
 8002338:	08002591 	.word	0x08002591
 800233c:	0800238d 	.word	0x0800238d
 8002340:	08002591 	.word	0x08002591
 8002344:	08002591 	.word	0x08002591
 8002348:	08002591 	.word	0x08002591
 800234c:	08002591 	.word	0x08002591
 8002350:	08002591 	.word	0x08002591
 8002354:	08002591 	.word	0x08002591
 8002358:	08002591 	.word	0x08002591
 800235c:	08002393 	.word	0x08002393
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002360:	4b90      	ldr	r3, [pc, #576]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0320 	and.w	r3, r3, #32
 8002368:	2b00      	cmp	r3, #0
 800236a:	d009      	beq.n	8002380 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800236c:	4b8d      	ldr	r3, [pc, #564]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	08db      	lsrs	r3, r3, #3
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	4a8c      	ldr	r2, [pc, #560]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002378:	fa22 f303 	lsr.w	r3, r2, r3
 800237c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800237e:	e10a      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002380:	4b89      	ldr	r3, [pc, #548]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002382:	61bb      	str	r3, [r7, #24]
    break;
 8002384:	e107      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002386:	4b89      	ldr	r3, [pc, #548]	; (80025ac <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002388:	61bb      	str	r3, [r7, #24]
    break;
 800238a:	e104      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800238c:	4b88      	ldr	r3, [pc, #544]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800238e:	61bb      	str	r3, [r7, #24]
    break;
 8002390:	e101      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002392:	4b84      	ldr	r3, [pc, #528]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800239c:	4b81      	ldr	r3, [pc, #516]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800239e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a0:	091b      	lsrs	r3, r3, #4
 80023a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023a6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80023a8:	4b7e      	ldr	r3, [pc, #504]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80023b2:	4b7c      	ldr	r3, [pc, #496]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b6:	08db      	lsrs	r3, r3, #3
 80023b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	fb02 f303 	mul.w	r3, r2, r3
 80023c2:	ee07 3a90 	vmov	s15, r3
 80023c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ca:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 80da 	beq.w	800258a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d05a      	beq.n	8002492 <HAL_RCC_GetSysClockFreq+0x1b2>
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d302      	bcc.n	80023e6 <HAL_RCC_GetSysClockFreq+0x106>
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d078      	beq.n	80024d6 <HAL_RCC_GetSysClockFreq+0x1f6>
 80023e4:	e099      	b.n	800251a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023e6:	4b6f      	ldr	r3, [pc, #444]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0320 	and.w	r3, r3, #32
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d02d      	beq.n	800244e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80023f2:	4b6c      	ldr	r3, [pc, #432]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	08db      	lsrs	r3, r3, #3
 80023f8:	f003 0303 	and.w	r3, r3, #3
 80023fc:	4a6a      	ldr	r2, [pc, #424]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80023fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002402:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	ee07 3a90 	vmov	s15, r3
 800240a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	ee07 3a90 	vmov	s15, r3
 8002414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002418:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800241c:	4b61      	ldr	r3, [pc, #388]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800241e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002424:	ee07 3a90 	vmov	s15, r3
 8002428:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800242c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002430:	eddf 5a60 	vldr	s11, [pc, #384]	; 80025b4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002434:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002438:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800243c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002440:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002448:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800244c:	e087      	b.n	800255e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	ee07 3a90 	vmov	s15, r3
 8002454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002458:	eddf 6a57 	vldr	s13, [pc, #348]	; 80025b8 <HAL_RCC_GetSysClockFreq+0x2d8>
 800245c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002460:	4b50      	ldr	r3, [pc, #320]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002468:	ee07 3a90 	vmov	s15, r3
 800246c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002470:	ed97 6a02 	vldr	s12, [r7, #8]
 8002474:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80025b4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002478:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800247c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002480:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002484:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800248c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002490:	e065      	b.n	800255e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	ee07 3a90 	vmov	s15, r3
 8002498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800249c:	eddf 6a47 	vldr	s13, [pc, #284]	; 80025bc <HAL_RCC_GetSysClockFreq+0x2dc>
 80024a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024a4:	4b3f      	ldr	r3, [pc, #252]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80024a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ac:	ee07 3a90 	vmov	s15, r3
 80024b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80024b8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80025b4 <HAL_RCC_GetSysClockFreq+0x2d4>
 80024bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80024d4:	e043      	b.n	800255e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	ee07 3a90 	vmov	s15, r3
 80024dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024e0:	eddf 6a37 	vldr	s13, [pc, #220]	; 80025c0 <HAL_RCC_GetSysClockFreq+0x2e0>
 80024e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024e8:	4b2e      	ldr	r3, [pc, #184]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024f0:	ee07 3a90 	vmov	s15, r3
 80024f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80024fc:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80025b4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002500:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002504:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002508:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800250c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002514:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002518:	e021      	b.n	800255e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	ee07 3a90 	vmov	s15, r3
 8002520:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002524:	eddf 6a25 	vldr	s13, [pc, #148]	; 80025bc <HAL_RCC_GetSysClockFreq+0x2dc>
 8002528:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800252c:	4b1d      	ldr	r3, [pc, #116]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002534:	ee07 3a90 	vmov	s15, r3
 8002538:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800253c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002540:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80025b4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002544:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002548:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800254c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002550:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002558:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800255c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800255e:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	0a5b      	lsrs	r3, r3, #9
 8002564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002568:	3301      	adds	r3, #1
 800256a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	ee07 3a90 	vmov	s15, r3
 8002572:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002576:	edd7 6a07 	vldr	s13, [r7, #28]
 800257a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800257e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002582:	ee17 3a90 	vmov	r3, s15
 8002586:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002588:	e005      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800258a:	2300      	movs	r3, #0
 800258c:	61bb      	str	r3, [r7, #24]
    break;
 800258e:	e002      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8002590:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002592:	61bb      	str	r3, [r7, #24]
    break;
 8002594:	bf00      	nop
  }

  return sysclockfreq;
 8002596:	69bb      	ldr	r3, [r7, #24]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3724      	adds	r7, #36	; 0x24
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	58024400 	.word	0x58024400
 80025a8:	03d09000 	.word	0x03d09000
 80025ac:	003d0900 	.word	0x003d0900
 80025b0:	017d7840 	.word	0x017d7840
 80025b4:	46000000 	.word	0x46000000
 80025b8:	4c742400 	.word	0x4c742400
 80025bc:	4a742400 	.word	0x4a742400
 80025c0:	4bbebc20 	.word	0x4bbebc20

080025c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80025ca:	f7ff fe89 	bl	80022e0 <HAL_RCC_GetSysClockFreq>
 80025ce:	4601      	mov	r1, r0
 80025d0:	4b10      	ldr	r3, [pc, #64]	; (8002614 <HAL_RCC_GetHCLKFreq+0x50>)
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	0a1b      	lsrs	r3, r3, #8
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	4a0f      	ldr	r2, [pc, #60]	; (8002618 <HAL_RCC_GetHCLKFreq+0x54>)
 80025dc:	5cd3      	ldrb	r3, [r2, r3]
 80025de:	f003 031f 	and.w	r3, r3, #31
 80025e2:	fa21 f303 	lsr.w	r3, r1, r3
 80025e6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025e8:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <HAL_RCC_GetHCLKFreq+0x50>)
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	f003 030f 	and.w	r3, r3, #15
 80025f0:	4a09      	ldr	r2, [pc, #36]	; (8002618 <HAL_RCC_GetHCLKFreq+0x54>)
 80025f2:	5cd3      	ldrb	r3, [r2, r3]
 80025f4:	f003 031f 	and.w	r3, r3, #31
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	fa22 f303 	lsr.w	r3, r2, r3
 80025fe:	4a07      	ldr	r2, [pc, #28]	; (800261c <HAL_RCC_GetHCLKFreq+0x58>)
 8002600:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002602:	4a07      	ldr	r2, [pc, #28]	; (8002620 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002608:	4b04      	ldr	r3, [pc, #16]	; (800261c <HAL_RCC_GetHCLKFreq+0x58>)
 800260a:	681b      	ldr	r3, [r3, #0]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	58024400 	.word	0x58024400
 8002618:	080055e4 	.word	0x080055e4
 800261c:	24000008 	.word	0x24000008
 8002620:	24000004 	.word	0x24000004

08002624 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800262c:	2300      	movs	r3, #0
 800262e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002630:	2300      	movs	r3, #0
 8002632:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d03d      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002644:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002648:	d013      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800264a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800264e:	d802      	bhi.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002650:	2b00      	cmp	r3, #0
 8002652:	d007      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002654:	e01f      	b.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002656:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800265a:	d013      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800265c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002660:	d01c      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002662:	e018      	b.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002664:	4baf      	ldr	r3, [pc, #700]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002668:	4aae      	ldr	r2, [pc, #696]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800266a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800266e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002670:	e015      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3304      	adds	r3, #4
 8002676:	2102      	movs	r1, #2
 8002678:	4618      	mov	r0, r3
 800267a:	f001 fd33 	bl	80040e4 <RCCEx_PLL2_Config>
 800267e:	4603      	mov	r3, r0
 8002680:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002682:	e00c      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3324      	adds	r3, #36	; 0x24
 8002688:	2102      	movs	r1, #2
 800268a:	4618      	mov	r0, r3
 800268c:	f001 fddc 	bl	8004248 <RCCEx_PLL3_Config>
 8002690:	4603      	mov	r3, r0
 8002692:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002694:	e003      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	75fb      	strb	r3, [r7, #23]
      break;
 800269a:	e000      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800269c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800269e:	7dfb      	ldrb	r3, [r7, #23]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d109      	bne.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80026a4:	4b9f      	ldr	r3, [pc, #636]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026b0:	499c      	ldr	r1, [pc, #624]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	650b      	str	r3, [r1, #80]	; 0x50
 80026b6:	e001      	b.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026b8:	7dfb      	ldrb	r3, [r7, #23]
 80026ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d03d      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026cc:	2b04      	cmp	r3, #4
 80026ce:	d826      	bhi.n	800271e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80026d0:	a201      	add	r2, pc, #4	; (adr r2, 80026d8 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80026d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d6:	bf00      	nop
 80026d8:	080026ed 	.word	0x080026ed
 80026dc:	080026fb 	.word	0x080026fb
 80026e0:	0800270d 	.word	0x0800270d
 80026e4:	08002725 	.word	0x08002725
 80026e8:	08002725 	.word	0x08002725
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026ec:	4b8d      	ldr	r3, [pc, #564]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f0:	4a8c      	ldr	r2, [pc, #560]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026f8:	e015      	b.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3304      	adds	r3, #4
 80026fe:	2100      	movs	r1, #0
 8002700:	4618      	mov	r0, r3
 8002702:	f001 fcef 	bl	80040e4 <RCCEx_PLL2_Config>
 8002706:	4603      	mov	r3, r0
 8002708:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800270a:	e00c      	b.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3324      	adds	r3, #36	; 0x24
 8002710:	2100      	movs	r1, #0
 8002712:	4618      	mov	r0, r3
 8002714:	f001 fd98 	bl	8004248 <RCCEx_PLL3_Config>
 8002718:	4603      	mov	r3, r0
 800271a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800271c:	e003      	b.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	75fb      	strb	r3, [r7, #23]
      break;
 8002722:	e000      	b.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8002724:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002726:	7dfb      	ldrb	r3, [r7, #23]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d109      	bne.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800272c:	4b7d      	ldr	r3, [pc, #500]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800272e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002730:	f023 0207 	bic.w	r2, r3, #7
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002738:	497a      	ldr	r1, [pc, #488]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800273a:	4313      	orrs	r3, r2
 800273c:	650b      	str	r3, [r1, #80]	; 0x50
 800273e:	e001      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002740:	7dfb      	ldrb	r3, [r7, #23]
 8002742:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800274c:	2b00      	cmp	r3, #0
 800274e:	d03e      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002754:	2b80      	cmp	r3, #128	; 0x80
 8002756:	d01c      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002758:	2b80      	cmp	r3, #128	; 0x80
 800275a:	d804      	bhi.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002760:	2b40      	cmp	r3, #64	; 0x40
 8002762:	d00d      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002764:	e01e      	b.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8002766:	2bc0      	cmp	r3, #192	; 0xc0
 8002768:	d01f      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x186>
 800276a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800276e:	d01e      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002770:	e018      	b.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002772:	4b6c      	ldr	r3, [pc, #432]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002776:	4a6b      	ldr	r2, [pc, #428]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800277c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800277e:	e017      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3304      	adds	r3, #4
 8002784:	2100      	movs	r1, #0
 8002786:	4618      	mov	r0, r3
 8002788:	f001 fcac 	bl	80040e4 <RCCEx_PLL2_Config>
 800278c:	4603      	mov	r3, r0
 800278e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002790:	e00e      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	3324      	adds	r3, #36	; 0x24
 8002796:	2100      	movs	r1, #0
 8002798:	4618      	mov	r0, r3
 800279a:	f001 fd55 	bl	8004248 <RCCEx_PLL3_Config>
 800279e:	4603      	mov	r3, r0
 80027a0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80027a2:	e005      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	75fb      	strb	r3, [r7, #23]
      break;
 80027a8:	e002      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80027aa:	bf00      	nop
 80027ac:	e000      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80027ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027b0:	7dfb      	ldrb	r3, [r7, #23]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d109      	bne.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80027b6:	4b5b      	ldr	r3, [pc, #364]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80027b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ba:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c2:	4958      	ldr	r1, [pc, #352]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	650b      	str	r3, [r1, #80]	; 0x50
 80027c8:	e001      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ca:	7dfb      	ldrb	r3, [r7, #23]
 80027cc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d044      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80027e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027e4:	d01f      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80027e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ea:	d805      	bhi.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00a      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80027f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027f4:	d00e      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80027f6:	e01f      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80027f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80027fc:	d01f      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80027fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002802:	d01e      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002804:	e018      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002806:	4b47      	ldr	r3, [pc, #284]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280a:	4a46      	ldr	r2, [pc, #280]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800280c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002810:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002812:	e017      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3304      	adds	r3, #4
 8002818:	2100      	movs	r1, #0
 800281a:	4618      	mov	r0, r3
 800281c:	f001 fc62 	bl	80040e4 <RCCEx_PLL2_Config>
 8002820:	4603      	mov	r3, r0
 8002822:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002824:	e00e      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3324      	adds	r3, #36	; 0x24
 800282a:	2100      	movs	r1, #0
 800282c:	4618      	mov	r0, r3
 800282e:	f001 fd0b 	bl	8004248 <RCCEx_PLL3_Config>
 8002832:	4603      	mov	r3, r0
 8002834:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002836:	e005      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	75fb      	strb	r3, [r7, #23]
      break;
 800283c:	e002      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800283e:	bf00      	nop
 8002840:	e000      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002842:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002844:	7dfb      	ldrb	r3, [r7, #23]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10a      	bne.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800284a:	4b36      	ldr	r3, [pc, #216]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800284c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002858:	4932      	ldr	r1, [pc, #200]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800285a:	4313      	orrs	r3, r2
 800285c:	658b      	str	r3, [r1, #88]	; 0x58
 800285e:	e001      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002860:	7dfb      	ldrb	r3, [r7, #23]
 8002862:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800286c:	2b00      	cmp	r3, #0
 800286e:	d044      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002876:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800287a:	d01f      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x298>
 800287c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002880:	d805      	bhi.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00a      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8002886:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800288a:	d00e      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x286>
 800288c:	e01f      	b.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800288e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002892:	d01f      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002894:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002898:	d01e      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800289a:	e018      	b.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800289c:	4b21      	ldr	r3, [pc, #132]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800289e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a0:	4a20      	ldr	r2, [pc, #128]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028a8:	e017      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3304      	adds	r3, #4
 80028ae:	2100      	movs	r1, #0
 80028b0:	4618      	mov	r0, r3
 80028b2:	f001 fc17 	bl	80040e4 <RCCEx_PLL2_Config>
 80028b6:	4603      	mov	r3, r0
 80028b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80028ba:	e00e      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3324      	adds	r3, #36	; 0x24
 80028c0:	2100      	movs	r1, #0
 80028c2:	4618      	mov	r0, r3
 80028c4:	f001 fcc0 	bl	8004248 <RCCEx_PLL3_Config>
 80028c8:	4603      	mov	r3, r0
 80028ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028cc:	e005      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	75fb      	strb	r3, [r7, #23]
      break;
 80028d2:	e002      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80028d4:	bf00      	nop
 80028d6:	e000      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80028d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028da:	7dfb      	ldrb	r3, [r7, #23]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10a      	bne.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80028e0:	4b10      	ldr	r3, [pc, #64]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80028ee:	490d      	ldr	r1, [pc, #52]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	658b      	str	r3, [r1, #88]	; 0x58
 80028f4:	e001      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f6:	7dfb      	ldrb	r3, [r7, #23]
 80028f8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d035      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800290a:	2b10      	cmp	r3, #16
 800290c:	d00c      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800290e:	2b10      	cmp	r3, #16
 8002910:	d802      	bhi.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8002912:	2b00      	cmp	r3, #0
 8002914:	d01b      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8002916:	e017      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002918:	2b20      	cmp	r3, #32
 800291a:	d00c      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800291c:	2b30      	cmp	r3, #48	; 0x30
 800291e:	d018      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8002920:	e012      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002922:	bf00      	nop
 8002924:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002928:	4baf      	ldr	r3, [pc, #700]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800292a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292c:	4aae      	ldr	r2, [pc, #696]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800292e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002932:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002934:	e00e      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3304      	adds	r3, #4
 800293a:	2102      	movs	r1, #2
 800293c:	4618      	mov	r0, r3
 800293e:	f001 fbd1 	bl	80040e4 <RCCEx_PLL2_Config>
 8002942:	4603      	mov	r3, r0
 8002944:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002946:	e005      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	75fb      	strb	r3, [r7, #23]
      break;
 800294c:	e002      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800294e:	bf00      	nop
 8002950:	e000      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002952:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002954:	7dfb      	ldrb	r3, [r7, #23]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d109      	bne.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800295a:	4ba3      	ldr	r3, [pc, #652]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800295c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002966:	49a0      	ldr	r1, [pc, #640]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002968:	4313      	orrs	r3, r2
 800296a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800296c:	e001      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800296e:	7dfb      	ldrb	r3, [r7, #23]
 8002970:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d042      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002986:	d01f      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8002988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800298c:	d805      	bhi.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00a      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8002992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002996:	d00e      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8002998:	e01f      	b.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800299a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800299e:	d01f      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80029a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029a4:	d01e      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80029a6:	e018      	b.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029a8:	4b8f      	ldr	r3, [pc, #572]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ac:	4a8e      	ldr	r2, [pc, #568]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80029b4:	e017      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3304      	adds	r3, #4
 80029ba:	2100      	movs	r1, #0
 80029bc:	4618      	mov	r0, r3
 80029be:	f001 fb91 	bl	80040e4 <RCCEx_PLL2_Config>
 80029c2:	4603      	mov	r3, r0
 80029c4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80029c6:	e00e      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3324      	adds	r3, #36	; 0x24
 80029cc:	2100      	movs	r1, #0
 80029ce:	4618      	mov	r0, r3
 80029d0:	f001 fc3a 	bl	8004248 <RCCEx_PLL3_Config>
 80029d4:	4603      	mov	r3, r0
 80029d6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80029d8:	e005      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	75fb      	strb	r3, [r7, #23]
      break;
 80029de:	e002      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80029e0:	bf00      	nop
 80029e2:	e000      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80029e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029e6:	7dfb      	ldrb	r3, [r7, #23]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d109      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80029ec:	4b7e      	ldr	r3, [pc, #504]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f8:	497b      	ldr	r1, [pc, #492]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	650b      	str	r3, [r1, #80]	; 0x50
 80029fe:	e001      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a00:	7dfb      	ldrb	r3, [r7, #23]
 8002a02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d042      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a18:	d01b      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002a1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a1e:	d805      	bhi.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d022      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8002a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a28:	d00a      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002a2a:	e01b      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8002a2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a30:	d01d      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8002a32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a36:	d01c      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8002a38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a3c:	d01b      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8002a3e:	e011      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3304      	adds	r3, #4
 8002a44:	2101      	movs	r1, #1
 8002a46:	4618      	mov	r0, r3
 8002a48:	f001 fb4c 	bl	80040e4 <RCCEx_PLL2_Config>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002a50:	e012      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3324      	adds	r3, #36	; 0x24
 8002a56:	2101      	movs	r1, #1
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f001 fbf5 	bl	8004248 <RCCEx_PLL3_Config>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002a62:	e009      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	75fb      	strb	r3, [r7, #23]
      break;
 8002a68:	e006      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002a6a:	bf00      	nop
 8002a6c:	e004      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002a6e:	bf00      	nop
 8002a70:	e002      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002a72:	bf00      	nop
 8002a74:	e000      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002a76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a78:	7dfb      	ldrb	r3, [r7, #23]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d109      	bne.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002a7e:	4b5a      	ldr	r3, [pc, #360]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a82:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a8a:	4957      	ldr	r1, [pc, #348]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	650b      	str	r3, [r1, #80]	; 0x50
 8002a90:	e001      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a92:	7dfb      	ldrb	r3, [r7, #23]
 8002a94:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d044      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002aa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aac:	d01b      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8002aae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ab2:	d805      	bhi.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d022      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002ab8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002abc:	d00a      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002abe:	e01b      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8002ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac4:	d01d      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002ac6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aca:	d01c      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8002acc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ad0:	d01b      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002ad2:	e011      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3304      	adds	r3, #4
 8002ad8:	2101      	movs	r1, #1
 8002ada:	4618      	mov	r0, r3
 8002adc:	f001 fb02 	bl	80040e4 <RCCEx_PLL2_Config>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002ae4:	e012      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	3324      	adds	r3, #36	; 0x24
 8002aea:	2101      	movs	r1, #1
 8002aec:	4618      	mov	r0, r3
 8002aee:	f001 fbab 	bl	8004248 <RCCEx_PLL3_Config>
 8002af2:	4603      	mov	r3, r0
 8002af4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002af6:	e009      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	75fb      	strb	r3, [r7, #23]
      break;
 8002afc:	e006      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002afe:	bf00      	nop
 8002b00:	e004      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002b02:	bf00      	nop
 8002b04:	e002      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002b06:	bf00      	nop
 8002b08:	e000      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002b0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b0c:	7dfb      	ldrb	r3, [r7, #23]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10a      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002b12:	4b35      	ldr	r3, [pc, #212]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b16:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b20:	4931      	ldr	r1, [pc, #196]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	658b      	str	r3, [r1, #88]	; 0x58
 8002b26:	e001      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b28:	7dfb      	ldrb	r3, [r7, #23]
 8002b2a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d02d      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b40:	d005      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002b42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b46:	d009      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d013      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002b4c:	e00f      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b4e:	4b26      	ldr	r3, [pc, #152]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b52:	4a25      	ldr	r2, [pc, #148]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002b5a:	e00c      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3304      	adds	r3, #4
 8002b60:	2101      	movs	r1, #1
 8002b62:	4618      	mov	r0, r3
 8002b64:	f001 fabe 	bl	80040e4 <RCCEx_PLL2_Config>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002b6c:	e003      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	75fb      	strb	r3, [r7, #23]
      break;
 8002b72:	e000      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8002b74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b76:	7dfb      	ldrb	r3, [r7, #23]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d109      	bne.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b7c:	4b1a      	ldr	r3, [pc, #104]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b80:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b88:	4917      	ldr	r1, [pc, #92]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	650b      	str	r3, [r1, #80]	; 0x50
 8002b8e:	e001      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b90:	7dfb      	ldrb	r3, [r7, #23]
 8002b92:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d035      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d81b      	bhi.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002ba8:	a201      	add	r2, pc, #4	; (adr r2, 8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8002baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bae:	bf00      	nop
 8002bb0:	08002bed 	.word	0x08002bed
 8002bb4:	08002bc1 	.word	0x08002bc1
 8002bb8:	08002bcf 	.word	0x08002bcf
 8002bbc:	08002bed 	.word	0x08002bed
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bc0:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc4:	4a08      	ldr	r2, [pc, #32]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002bcc:	e00f      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	2102      	movs	r1, #2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f001 fa85 	bl	80040e4 <RCCEx_PLL2_Config>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002bde:	e006      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	75fb      	strb	r3, [r7, #23]
      break;
 8002be4:	e003      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8002be6:	bf00      	nop
 8002be8:	58024400 	.word	0x58024400
      break;
 8002bec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bee:	7dfb      	ldrb	r3, [r7, #23]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d109      	bne.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002bf4:	4bba      	ldr	r3, [pc, #744]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf8:	f023 0203 	bic.w	r2, r3, #3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c00:	49b7      	ldr	r1, [pc, #732]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002c06:	e001      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c08:	7dfb      	ldrb	r3, [r7, #23]
 8002c0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 8086 	beq.w	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c1a:	4bb2      	ldr	r3, [pc, #712]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4ab1      	ldr	r2, [pc, #708]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c26:	f7fe f80b 	bl	8000c40 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c2c:	e009      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c2e:	f7fe f807 	bl	8000c40 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b64      	cmp	r3, #100	; 0x64
 8002c3a:	d902      	bls.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	75fb      	strb	r3, [r7, #23]
        break;
 8002c40:	e005      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c42:	4ba8      	ldr	r3, [pc, #672]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0ef      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8002c4e:	7dfb      	ldrb	r3, [r7, #23]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d166      	bne.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002c54:	4ba2      	ldr	r3, [pc, #648]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c5e:	4053      	eors	r3, r2
 8002c60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d013      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c68:	4b9d      	ldr	r3, [pc, #628]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c70:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c72:	4b9b      	ldr	r3, [pc, #620]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c76:	4a9a      	ldr	r2, [pc, #616]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c7c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c7e:	4b98      	ldr	r3, [pc, #608]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c82:	4a97      	ldr	r2, [pc, #604]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c88:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002c8a:	4a95      	ldr	r2, [pc, #596]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c9a:	d115      	bne.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9c:	f7fd ffd0 	bl	8000c40 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ca2:	e00b      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca4:	f7fd ffcc 	bl	8000c40 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d902      	bls.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	75fb      	strb	r3, [r7, #23]
            break;
 8002cba:	e005      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cbc:	4b88      	ldr	r3, [pc, #544]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0ed      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8002cc8:	7dfb      	ldrb	r3, [r7, #23]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d126      	bne.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002cd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cdc:	d10d      	bne.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8002cde:	4b80      	ldr	r3, [pc, #512]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002cec:	0919      	lsrs	r1, r3, #4
 8002cee:	4b7e      	ldr	r3, [pc, #504]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8002cf0:	400b      	ands	r3, r1
 8002cf2:	497b      	ldr	r1, [pc, #492]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	610b      	str	r3, [r1, #16]
 8002cf8:	e005      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8002cfa:	4b79      	ldr	r3, [pc, #484]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	4a78      	ldr	r2, [pc, #480]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d00:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002d04:	6113      	str	r3, [r2, #16]
 8002d06:	4b76      	ldr	r3, [pc, #472]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d14:	4972      	ldr	r1, [pc, #456]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	670b      	str	r3, [r1, #112]	; 0x70
 8002d1a:	e004      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d1c:	7dfb      	ldrb	r3, [r7, #23]
 8002d1e:	75bb      	strb	r3, [r7, #22]
 8002d20:	e001      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d22:	7dfb      	ldrb	r3, [r7, #23]
 8002d24:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d07d      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d36:	2b28      	cmp	r3, #40	; 0x28
 8002d38:	d866      	bhi.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8002d3a:	a201      	add	r2, pc, #4	; (adr r2, 8002d40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d40:	08002e0f 	.word	0x08002e0f
 8002d44:	08002e09 	.word	0x08002e09
 8002d48:	08002e09 	.word	0x08002e09
 8002d4c:	08002e09 	.word	0x08002e09
 8002d50:	08002e09 	.word	0x08002e09
 8002d54:	08002e09 	.word	0x08002e09
 8002d58:	08002e09 	.word	0x08002e09
 8002d5c:	08002e09 	.word	0x08002e09
 8002d60:	08002de5 	.word	0x08002de5
 8002d64:	08002e09 	.word	0x08002e09
 8002d68:	08002e09 	.word	0x08002e09
 8002d6c:	08002e09 	.word	0x08002e09
 8002d70:	08002e09 	.word	0x08002e09
 8002d74:	08002e09 	.word	0x08002e09
 8002d78:	08002e09 	.word	0x08002e09
 8002d7c:	08002e09 	.word	0x08002e09
 8002d80:	08002df7 	.word	0x08002df7
 8002d84:	08002e09 	.word	0x08002e09
 8002d88:	08002e09 	.word	0x08002e09
 8002d8c:	08002e09 	.word	0x08002e09
 8002d90:	08002e09 	.word	0x08002e09
 8002d94:	08002e09 	.word	0x08002e09
 8002d98:	08002e09 	.word	0x08002e09
 8002d9c:	08002e09 	.word	0x08002e09
 8002da0:	08002e0f 	.word	0x08002e0f
 8002da4:	08002e09 	.word	0x08002e09
 8002da8:	08002e09 	.word	0x08002e09
 8002dac:	08002e09 	.word	0x08002e09
 8002db0:	08002e09 	.word	0x08002e09
 8002db4:	08002e09 	.word	0x08002e09
 8002db8:	08002e09 	.word	0x08002e09
 8002dbc:	08002e09 	.word	0x08002e09
 8002dc0:	08002e0f 	.word	0x08002e0f
 8002dc4:	08002e09 	.word	0x08002e09
 8002dc8:	08002e09 	.word	0x08002e09
 8002dcc:	08002e09 	.word	0x08002e09
 8002dd0:	08002e09 	.word	0x08002e09
 8002dd4:	08002e09 	.word	0x08002e09
 8002dd8:	08002e09 	.word	0x08002e09
 8002ddc:	08002e09 	.word	0x08002e09
 8002de0:	08002e0f 	.word	0x08002e0f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3304      	adds	r3, #4
 8002de8:	2101      	movs	r1, #1
 8002dea:	4618      	mov	r0, r3
 8002dec:	f001 f97a 	bl	80040e4 <RCCEx_PLL2_Config>
 8002df0:	4603      	mov	r3, r0
 8002df2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002df4:	e00c      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3324      	adds	r3, #36	; 0x24
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f001 fa23 	bl	8004248 <RCCEx_PLL3_Config>
 8002e02:	4603      	mov	r3, r0
 8002e04:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002e06:	e003      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e0c:	e000      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8002e0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e10:	7dfb      	ldrb	r3, [r7, #23]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d109      	bne.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002e16:	4b32      	ldr	r3, [pc, #200]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e22:	492f      	ldr	r1, [pc, #188]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	654b      	str	r3, [r1, #84]	; 0x54
 8002e28:	e001      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e2a:	7dfb      	ldrb	r3, [r7, #23]
 8002e2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d037      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e3e:	2b05      	cmp	r3, #5
 8002e40:	d820      	bhi.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8002e42:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8002e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e48:	08002e8b 	.word	0x08002e8b
 8002e4c:	08002e61 	.word	0x08002e61
 8002e50:	08002e73 	.word	0x08002e73
 8002e54:	08002e8b 	.word	0x08002e8b
 8002e58:	08002e8b 	.word	0x08002e8b
 8002e5c:	08002e8b 	.word	0x08002e8b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3304      	adds	r3, #4
 8002e64:	2101      	movs	r1, #1
 8002e66:	4618      	mov	r0, r3
 8002e68:	f001 f93c 	bl	80040e4 <RCCEx_PLL2_Config>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002e70:	e00c      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3324      	adds	r3, #36	; 0x24
 8002e76:	2101      	movs	r1, #1
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f001 f9e5 	bl	8004248 <RCCEx_PLL3_Config>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002e82:	e003      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	75fb      	strb	r3, [r7, #23]
      break;
 8002e88:	e000      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8002e8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e8c:	7dfb      	ldrb	r3, [r7, #23]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d109      	bne.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002e92:	4b13      	ldr	r3, [pc, #76]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e96:	f023 0207 	bic.w	r2, r3, #7
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e9e:	4910      	ldr	r1, [pc, #64]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	654b      	str	r3, [r1, #84]	; 0x54
 8002ea4:	e001      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea6:	7dfb      	ldrb	r3, [r7, #23]
 8002ea8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d040      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebc:	2b05      	cmp	r3, #5
 8002ebe:	d827      	bhi.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8002ec0:	a201      	add	r2, pc, #4	; (adr r2, 8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8002ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec6:	bf00      	nop
 8002ec8:	08002f17 	.word	0x08002f17
 8002ecc:	08002eed 	.word	0x08002eed
 8002ed0:	08002eff 	.word	0x08002eff
 8002ed4:	08002f17 	.word	0x08002f17
 8002ed8:	08002f17 	.word	0x08002f17
 8002edc:	08002f17 	.word	0x08002f17
 8002ee0:	58024400 	.word	0x58024400
 8002ee4:	58024800 	.word	0x58024800
 8002ee8:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	3304      	adds	r3, #4
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f001 f8f6 	bl	80040e4 <RCCEx_PLL2_Config>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002efc:	e00c      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3324      	adds	r3, #36	; 0x24
 8002f02:	2101      	movs	r1, #1
 8002f04:	4618      	mov	r0, r3
 8002f06:	f001 f99f 	bl	8004248 <RCCEx_PLL3_Config>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002f0e:	e003      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	75fb      	strb	r3, [r7, #23]
      break;
 8002f14:	e000      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8002f16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f18:	7dfb      	ldrb	r3, [r7, #23]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10a      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f1e:	4bb2      	ldr	r3, [pc, #712]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f22:	f023 0207 	bic.w	r2, r3, #7
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2c:	49ae      	ldr	r1, [pc, #696]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	658b      	str	r3, [r1, #88]	; 0x58
 8002f32:	e001      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f34:	7dfb      	ldrb	r3, [r7, #23]
 8002f36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0320 	and.w	r3, r3, #32
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d044      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f4e:	d01b      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8002f50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f54:	d805      	bhi.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d022      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8002f5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f5e:	d00a      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8002f60:	e01b      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8002f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f66:	d01d      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8002f68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f6c:	d01c      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8002f6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f72:	d01b      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x988>
 8002f74:	e011      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	3304      	adds	r3, #4
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f001 f8b1 	bl	80040e4 <RCCEx_PLL2_Config>
 8002f82:	4603      	mov	r3, r0
 8002f84:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002f86:	e012      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3324      	adds	r3, #36	; 0x24
 8002f8c:	2102      	movs	r1, #2
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f001 f95a 	bl	8004248 <RCCEx_PLL3_Config>
 8002f94:	4603      	mov	r3, r0
 8002f96:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002f98:	e009      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	75fb      	strb	r3, [r7, #23]
      break;
 8002f9e:	e006      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002fa0:	bf00      	nop
 8002fa2:	e004      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002fa4:	bf00      	nop
 8002fa6:	e002      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002fa8:	bf00      	nop
 8002faa:	e000      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002fac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10a      	bne.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fb4:	4b8c      	ldr	r3, [pc, #560]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fc2:	4989      	ldr	r1, [pc, #548]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	654b      	str	r3, [r1, #84]	; 0x54
 8002fc8:	e001      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fca:	7dfb      	ldrb	r3, [r7, #23]
 8002fcc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d044      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fe0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fe4:	d01b      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8002fe6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fea:	d805      	bhi.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d022      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8002ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff4:	d00a      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8002ff6:	e01b      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8002ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ffc:	d01d      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8002ffe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003002:	d01c      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8003004:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003008:	d01b      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800300a:	e011      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3304      	adds	r3, #4
 8003010:	2100      	movs	r1, #0
 8003012:	4618      	mov	r0, r3
 8003014:	f001 f866 	bl	80040e4 <RCCEx_PLL2_Config>
 8003018:	4603      	mov	r3, r0
 800301a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800301c:	e012      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	3324      	adds	r3, #36	; 0x24
 8003022:	2102      	movs	r1, #2
 8003024:	4618      	mov	r0, r3
 8003026:	f001 f90f 	bl	8004248 <RCCEx_PLL3_Config>
 800302a:	4603      	mov	r3, r0
 800302c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800302e:	e009      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	75fb      	strb	r3, [r7, #23]
      break;
 8003034:	e006      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003036:	bf00      	nop
 8003038:	e004      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800303a:	bf00      	nop
 800303c:	e002      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800303e:	bf00      	nop
 8003040:	e000      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003042:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003044:	7dfb      	ldrb	r3, [r7, #23]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10a      	bne.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800304a:	4b67      	ldr	r3, [pc, #412]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800304c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003058:	4963      	ldr	r1, [pc, #396]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800305a:	4313      	orrs	r3, r2
 800305c:	658b      	str	r3, [r1, #88]	; 0x58
 800305e:	e001      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003060:	7dfb      	ldrb	r3, [r7, #23]
 8003062:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306c:	2b00      	cmp	r3, #0
 800306e:	d044      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003076:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800307a:	d01b      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800307c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003080:	d805      	bhi.n	800308e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8003082:	2b00      	cmp	r3, #0
 8003084:	d022      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800308a:	d00a      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800308c:	e01b      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800308e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003092:	d01d      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003094:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003098:	d01c      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800309a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800309e:	d01b      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80030a0:	e011      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3304      	adds	r3, #4
 80030a6:	2100      	movs	r1, #0
 80030a8:	4618      	mov	r0, r3
 80030aa:	f001 f81b 	bl	80040e4 <RCCEx_PLL2_Config>
 80030ae:	4603      	mov	r3, r0
 80030b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80030b2:	e012      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3324      	adds	r3, #36	; 0x24
 80030b8:	2102      	movs	r1, #2
 80030ba:	4618      	mov	r0, r3
 80030bc:	f001 f8c4 	bl	8004248 <RCCEx_PLL3_Config>
 80030c0:	4603      	mov	r3, r0
 80030c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80030c4:	e009      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	75fb      	strb	r3, [r7, #23]
      break;
 80030ca:	e006      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80030cc:	bf00      	nop
 80030ce:	e004      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80030d0:	bf00      	nop
 80030d2:	e002      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80030d4:	bf00      	nop
 80030d6:	e000      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80030d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030da:	7dfb      	ldrb	r3, [r7, #23]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10a      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80030e0:	4b41      	ldr	r3, [pc, #260]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80030e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030ee:	493e      	ldr	r1, [pc, #248]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	658b      	str	r3, [r1, #88]	; 0x58
 80030f4:	e001      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f6:	7dfb      	ldrb	r3, [r7, #23]
 80030f8:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	2b00      	cmp	r3, #0
 8003104:	d01a      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800310c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003110:	d10a      	bne.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	3324      	adds	r3, #36	; 0x24
 8003116:	2102      	movs	r1, #2
 8003118:	4618      	mov	r0, r3
 800311a:	f001 f895 	bl	8004248 <RCCEx_PLL3_Config>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003128:	4b2f      	ldr	r3, [pc, #188]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800312a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003136:	492c      	ldr	r1, [pc, #176]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003138:	4313      	orrs	r3, r2
 800313a:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0310 	and.w	r3, r3, #16
 8003144:	2b00      	cmp	r3, #0
 8003146:	d01a      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800314e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003152:	d10a      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3324      	adds	r3, #36	; 0x24
 8003158:	2102      	movs	r1, #2
 800315a:	4618      	mov	r0, r3
 800315c:	f001 f874 	bl	8004248 <RCCEx_PLL3_Config>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800316a:	4b1f      	ldr	r3, [pc, #124]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800316c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003178:	491b      	ldr	r1, [pc, #108]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800317a:	4313      	orrs	r3, r2
 800317c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d032      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003194:	d00d      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8003196:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800319a:	d016      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800319c:	2b00      	cmp	r3, #0
 800319e:	d111      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3304      	adds	r3, #4
 80031a4:	2100      	movs	r1, #0
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 ff9c 	bl	80040e4 <RCCEx_PLL2_Config>
 80031ac:	4603      	mov	r3, r0
 80031ae:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80031b0:	e00c      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3324      	adds	r3, #36	; 0x24
 80031b6:	2102      	movs	r1, #2
 80031b8:	4618      	mov	r0, r3
 80031ba:	f001 f845 	bl	8004248 <RCCEx_PLL3_Config>
 80031be:	4603      	mov	r3, r0
 80031c0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80031c2:	e003      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	75fb      	strb	r3, [r7, #23]
      break;
 80031c8:	e000      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80031ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031cc:	7dfb      	ldrb	r3, [r7, #23]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10c      	bne.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031d2:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80031d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80031e0:	4901      	ldr	r1, [pc, #4]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	658b      	str	r3, [r1, #88]	; 0x58
 80031e6:	e003      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80031e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ec:	7dfb      	ldrb	r3, [r7, #23]
 80031ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d02f      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003202:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003206:	d00c      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003208:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800320c:	d015      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800320e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003212:	d10f      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003214:	4b79      	ldr	r3, [pc, #484]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003218:	4a78      	ldr	r2, [pc, #480]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800321a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800321e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003220:	e00c      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3324      	adds	r3, #36	; 0x24
 8003226:	2101      	movs	r1, #1
 8003228:	4618      	mov	r0, r3
 800322a:	f001 f80d 	bl	8004248 <RCCEx_PLL3_Config>
 800322e:	4603      	mov	r3, r0
 8003230:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003232:	e003      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	75fb      	strb	r3, [r7, #23]
      break;
 8003238:	e000      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800323a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800323c:	7dfb      	ldrb	r3, [r7, #23]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10a      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003242:	4b6e      	ldr	r3, [pc, #440]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003246:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003250:	496a      	ldr	r1, [pc, #424]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003252:	4313      	orrs	r3, r2
 8003254:	654b      	str	r3, [r1, #84]	; 0x54
 8003256:	e001      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003258:	7dfb      	ldrb	r3, [r7, #23]
 800325a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d029      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8003270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003274:	d007      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8003276:	e00f      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003278:	4b60      	ldr	r3, [pc, #384]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327c:	4a5f      	ldr	r2, [pc, #380]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800327e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003282:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003284:	e00b      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	3304      	adds	r3, #4
 800328a:	2102      	movs	r1, #2
 800328c:	4618      	mov	r0, r3
 800328e:	f000 ff29 	bl	80040e4 <RCCEx_PLL2_Config>
 8003292:	4603      	mov	r3, r0
 8003294:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003296:	e002      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	75fb      	strb	r3, [r7, #23]
      break;
 800329c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800329e:	7dfb      	ldrb	r3, [r7, #23]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d109      	bne.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80032a4:	4b55      	ldr	r3, [pc, #340]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80032a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b0:	4952      	ldr	r1, [pc, #328]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80032b6:	e001      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b8:	7dfb      	ldrb	r3, [r7, #23]
 80032ba:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3324      	adds	r3, #36	; 0x24
 80032cc:	2102      	movs	r1, #2
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 ffba 	bl	8004248 <RCCEx_PLL3_Config>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d02f      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032f2:	d00c      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80032f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032f8:	d802      	bhi.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d011      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80032fe:	e00d      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8003300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003304:	d00f      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8003306:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800330a:	d00e      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800330c:	e006      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800330e:	4b3b      	ldr	r3, [pc, #236]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003312:	4a3a      	ldr	r2, [pc, #232]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003318:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800331a:	e007      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	75fb      	strb	r3, [r7, #23]
      break;
 8003320:	e004      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8003322:	bf00      	nop
 8003324:	e002      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8003326:	bf00      	nop
 8003328:	e000      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800332a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800332c:	7dfb      	ldrb	r3, [r7, #23]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d109      	bne.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003332:	4b32      	ldr	r3, [pc, #200]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003336:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800333e:	492f      	ldr	r1, [pc, #188]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003340:	4313      	orrs	r3, r2
 8003342:	654b      	str	r3, [r1, #84]	; 0x54
 8003344:	e001      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003346:	7dfb      	ldrb	r3, [r7, #23]
 8003348:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d008      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003356:	4b29      	ldr	r3, [pc, #164]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800335a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003362:	4926      	ldr	r1, [pc, #152]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003364:	4313      	orrs	r3, r2
 8003366:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d009      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003374:	4b21      	ldr	r3, [pc, #132]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003382:	491e      	ldr	r1, [pc, #120]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003384:	4313      	orrs	r3, r2
 8003386:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d008      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003394:	4b19      	ldr	r3, [pc, #100]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003398:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033a0:	4916      	ldr	r1, [pc, #88]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00d      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80033b2:	4b12      	ldr	r3, [pc, #72]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	4a11      	ldr	r2, [pc, #68]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80033b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80033bc:	6113      	str	r3, [r2, #16]
 80033be:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80033c0:	691a      	ldr	r2, [r3, #16]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80033c8:	490c      	ldr	r1, [pc, #48]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	da08      	bge.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80033d6:	4b09      	ldr	r3, [pc, #36]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80033d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033e2:	4906      	ldr	r1, [pc, #24]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80033e8:	7dbb      	ldrb	r3, [r7, #22]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	e000      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	58024400 	.word	0x58024400

08003400 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b090      	sub	sp, #64	; 0x40
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800340e:	d150      	bne.n	80034b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8003410:	4ba1      	ldr	r3, [pc, #644]	; (8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8003412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800341a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341c:	2b04      	cmp	r3, #4
 800341e:	d844      	bhi.n	80034aa <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8003420:	a201      	add	r2, pc, #4	; (adr r2, 8003428 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8003422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003426:	bf00      	nop
 8003428:	0800343d 	.word	0x0800343d
 800342c:	0800344d 	.word	0x0800344d
 8003430:	0800345d 	.word	0x0800345d
 8003434:	080034a5 	.word	0x080034a5
 8003438:	0800346d 	.word	0x0800346d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800343c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003440:	4618      	mov	r0, r3
 8003442:	f000 fd03 	bl	8003e4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003448:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800344a:	e241      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800344c:	f107 0318 	add.w	r3, r7, #24
 8003450:	4618      	mov	r0, r3
 8003452:	f000 fa63 	bl	800391c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800345a:	e239      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800345c:	f107 030c 	add.w	r3, r7, #12
 8003460:	4618      	mov	r0, r3
 8003462:	f000 fba7 	bl	8003bb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800346a:	e231      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800346c:	4b8a      	ldr	r3, [pc, #552]	; (8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800346e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003470:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003474:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8003476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003478:	2b00      	cmp	r3, #0
 800347a:	d102      	bne.n	8003482 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800347c:	4b87      	ldr	r3, [pc, #540]	; (800369c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800347e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8003480:	e226      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8003482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003484:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003488:	d102      	bne.n	8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800348a:	4b85      	ldr	r3, [pc, #532]	; (80036a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800348c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800348e:	e21f      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8003490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003492:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003496:	d102      	bne.n	800349e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8003498:	4b82      	ldr	r3, [pc, #520]	; (80036a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800349a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800349c:	e218      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800349e:	2300      	movs	r3, #0
 80034a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80034a2:	e215      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80034a4:	4b80      	ldr	r3, [pc, #512]	; (80036a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80034a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80034a8:	e212      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80034aa:	2300      	movs	r3, #0
 80034ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80034ae:	bf00      	nop
 80034b0:	e20e      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034b8:	d14f      	bne.n	800355a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80034ba:	4b77      	ldr	r3, [pc, #476]	; (8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80034bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034be:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80034c2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80034c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c6:	2b80      	cmp	r3, #128	; 0x80
 80034c8:	d01c      	beq.n	8003504 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80034ca:	2b80      	cmp	r3, #128	; 0x80
 80034cc:	d804      	bhi.n	80034d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d008      	beq.n	80034e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 80034d2:	2b40      	cmp	r3, #64	; 0x40
 80034d4:	d00e      	beq.n	80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80034d6:	e03c      	b.n	8003552 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 80034d8:	2bc0      	cmp	r3, #192	; 0xc0
 80034da:	d037      	beq.n	800354c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80034dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034e0:	d018      	beq.n	8003514 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80034e2:	e036      	b.n	8003552 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80034e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 fcaf 	bl	8003e4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80034ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80034f2:	e1ed      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80034f4:	f107 0318 	add.w	r3, r7, #24
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 fa0f 	bl	800391c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003502:	e1e5      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003504:	f107 030c 	add.w	r3, r7, #12
 8003508:	4618      	mov	r0, r3
 800350a:	f000 fb53 	bl	8003bb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003512:	e1dd      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003514:	4b60      	ldr	r3, [pc, #384]	; (8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8003516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003518:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800351c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800351e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003520:	2b00      	cmp	r3, #0
 8003522:	d102      	bne.n	800352a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8003524:	4b5d      	ldr	r3, [pc, #372]	; (800369c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8003526:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8003528:	e1d2      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800352a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800352c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003530:	d102      	bne.n	8003538 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8003532:	4b5b      	ldr	r3, [pc, #364]	; (80036a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8003534:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003536:	e1cb      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8003538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800353a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800353e:	d102      	bne.n	8003546 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8003540:	4b58      	ldr	r3, [pc, #352]	; (80036a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003542:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003544:	e1c4      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8003546:	2300      	movs	r3, #0
 8003548:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800354a:	e1c1      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800354c:	4b56      	ldr	r3, [pc, #344]	; (80036a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800354e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003550:	e1be      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8003552:	2300      	movs	r3, #0
 8003554:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003556:	bf00      	nop
 8003558:	e1ba      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003560:	d153      	bne.n	800360a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8003562:	4b4d      	ldr	r3, [pc, #308]	; (8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8003564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003566:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800356a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800356c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003572:	d01f      	beq.n	80035b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8003574:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003578:	d805      	bhi.n	8003586 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800357e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003582:	d00f      	beq.n	80035a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8003584:	e03d      	b.n	8003602 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8003586:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800358a:	d037      	beq.n	80035fc <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800358c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003590:	d018      	beq.n	80035c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8003592:	e036      	b.n	8003602 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003598:	4618      	mov	r0, r3
 800359a:	f000 fc57 	bl	8003e4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800359e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80035a2:	e195      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80035a4:	f107 0318 	add.w	r3, r7, #24
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 f9b7 	bl	800391c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80035b2:	e18d      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80035b4:	f107 030c 	add.w	r3, r7, #12
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 fafb 	bl	8003bb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80035c2:	e185      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80035c4:	4b34      	ldr	r3, [pc, #208]	; (8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80035c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035cc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80035ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d102      	bne.n	80035da <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80035d4:	4b31      	ldr	r3, [pc, #196]	; (800369c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80035d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80035d8:	e17a      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80035da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035e0:	d102      	bne.n	80035e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 80035e2:	4b2f      	ldr	r3, [pc, #188]	; (80036a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80035e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80035e6:	e173      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80035e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035ee:	d102      	bne.n	80035f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 80035f0:	4b2c      	ldr	r3, [pc, #176]	; (80036a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80035f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80035f4:	e16c      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80035f6:	2300      	movs	r3, #0
 80035f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80035fa:	e169      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80035fc:	4b2a      	ldr	r3, [pc, #168]	; (80036a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80035fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003600:	e166      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8003602:	2300      	movs	r3, #0
 8003604:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003606:	bf00      	nop
 8003608:	e162      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003610:	d15d      	bne.n	80036ce <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8003612:	4b21      	ldr	r3, [pc, #132]	; (8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8003614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003616:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800361a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800361c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003622:	d01f      	beq.n	8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8003624:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003628:	d805      	bhi.n	8003636 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800362e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003632:	d00f      	beq.n	8003654 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8003634:	e047      	b.n	80036c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8003636:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800363a:	d041      	beq.n	80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800363c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003640:	d018      	beq.n	8003674 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8003642:	e040      	b.n	80036c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003648:	4618      	mov	r0, r3
 800364a:	f000 fbff 	bl	8003e4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800364e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003650:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003652:	e13d      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003654:	f107 0318 	add.w	r3, r7, #24
 8003658:	4618      	mov	r0, r3
 800365a:	f000 f95f 	bl	800391c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003662:	e135      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003664:	f107 030c 	add.w	r3, r7, #12
 8003668:	4618      	mov	r0, r3
 800366a:	f000 faa3 	bl	8003bb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003672:	e12d      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003674:	4b08      	ldr	r3, [pc, #32]	; (8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8003676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003678:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800367c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800367e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003680:	2b00      	cmp	r3, #0
 8003682:	d102      	bne.n	800368a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8003684:	4b05      	ldr	r3, [pc, #20]	; (800369c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8003686:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8003688:	e122      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800368a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800368c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003690:	d10c      	bne.n	80036ac <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8003692:	4b03      	ldr	r3, [pc, #12]	; (80036a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8003694:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003696:	e11b      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8003698:	58024400 	.word	0x58024400
 800369c:	03d09000 	.word	0x03d09000
 80036a0:	003d0900 	.word	0x003d0900
 80036a4:	017d7840 	.word	0x017d7840
 80036a8:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80036ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036b2:	d102      	bne.n	80036ba <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 80036b4:	4b89      	ldr	r3, [pc, #548]	; (80038dc <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80036b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80036b8:	e10a      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80036ba:	2300      	movs	r3, #0
 80036bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80036be:	e107      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80036c0:	4b87      	ldr	r3, [pc, #540]	; (80038e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 80036c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80036c4:	e104      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80036c6:	2300      	movs	r3, #0
 80036c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80036ca:	bf00      	nop
 80036cc:	e100      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d4:	d153      	bne.n	800377e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80036d6:	4b83      	ldr	r3, [pc, #524]	; (80038e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80036d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036da:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80036de:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80036e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036e6:	d01f      	beq.n	8003728 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80036e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ec:	d805      	bhi.n	80036fa <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00a      	beq.n	8003708 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80036f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036f6:	d00f      	beq.n	8003718 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80036f8:	e03d      	b.n	8003776 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 80036fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036fe:	d037      	beq.n	8003770 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8003700:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003704:	d018      	beq.n	8003738 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8003706:	e036      	b.n	8003776 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800370c:	4618      	mov	r0, r3
 800370e:	f000 fb9d 	bl	8003e4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003714:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003716:	e0db      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003718:	f107 0318 	add.w	r3, r7, #24
 800371c:	4618      	mov	r0, r3
 800371e:	f000 f8fd 	bl	800391c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003726:	e0d3      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003728:	f107 030c 	add.w	r3, r7, #12
 800372c:	4618      	mov	r0, r3
 800372e:	f000 fa41 	bl	8003bb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003736:	e0cb      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003738:	4b6a      	ldr	r3, [pc, #424]	; (80038e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800373a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800373c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003740:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8003742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003744:	2b00      	cmp	r3, #0
 8003746:	d102      	bne.n	800374e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8003748:	4b67      	ldr	r3, [pc, #412]	; (80038e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800374a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800374c:	e0c0      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800374e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003750:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003754:	d102      	bne.n	800375c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8003756:	4b65      	ldr	r3, [pc, #404]	; (80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8003758:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800375a:	e0b9      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800375c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800375e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003762:	d102      	bne.n	800376a <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8003764:	4b5d      	ldr	r3, [pc, #372]	; (80038dc <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8003766:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003768:	e0b2      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800376a:	2300      	movs	r3, #0
 800376c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800376e:	e0af      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003770:	4b5b      	ldr	r3, [pc, #364]	; (80038e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8003772:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003774:	e0ac      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8003776:	2300      	movs	r3, #0
 8003778:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800377a:	bf00      	nop
 800377c:	e0a8      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003784:	d13d      	bne.n	8003802 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8003786:	4b57      	ldr	r3, [pc, #348]	; (80038e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8003788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800378e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003796:	d00c      	beq.n	80037b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8003798:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800379c:	d011      	beq.n	80037c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d12b      	bne.n	80037fa <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80037a2:	f107 0318 	add.w	r3, r7, #24
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 f8b8 	bl	800391c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80037b0:	e08e      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80037b2:	f107 030c 	add.w	r3, r7, #12
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 f9fc 	bl	8003bb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80037c0:	e086      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80037c2:	4b48      	ldr	r3, [pc, #288]	; (80038e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80037c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037ca:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80037cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d102      	bne.n	80037d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80037d2:	4b45      	ldr	r3, [pc, #276]	; (80038e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80037d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80037d6:	e07b      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80037d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037de:	d102      	bne.n	80037e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 80037e0:	4b42      	ldr	r3, [pc, #264]	; (80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80037e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80037e4:	e074      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80037e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037ec:	d102      	bne.n	80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 80037ee:	4b3b      	ldr	r3, [pc, #236]	; (80038dc <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80037f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80037f2:	e06d      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80037f4:	2300      	movs	r3, #0
 80037f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80037f8:	e06a      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80037fa:	2300      	movs	r3, #0
 80037fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80037fe:	bf00      	nop
 8003800:	e066      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003808:	d11f      	bne.n	800384a <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800380a:	4b36      	ldr	r3, [pc, #216]	; (80038e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800380c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800380e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003812:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800381a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800381e:	d008      	beq.n	8003832 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8003820:	e00f      	b.n	8003842 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003826:	4618      	mov	r0, r3
 8003828:	f000 fb10 	bl	8003e4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800382c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003830:	e04e      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003832:	f107 0318 	add.w	r3, r7, #24
 8003836:	4618      	mov	r0, r3
 8003838:	f000 f870 	bl	800391c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003840:	e046      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8003842:	2300      	movs	r3, #0
 8003844:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003846:	bf00      	nop
 8003848:	e042      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003850:	d13c      	bne.n	80038cc <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8003852:	4b24      	ldr	r3, [pc, #144]	; (80038e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8003854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003856:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800385a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800385c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003862:	d01e      	beq.n	80038a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8003864:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003868:	d805      	bhi.n	8003876 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00d      	beq.n	800388a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800386e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003872:	d00e      	beq.n	8003892 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8003874:	e026      	b.n	80038c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8003876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800387a:	d01d      	beq.n	80038b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800387c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003880:	d01d      	beq.n	80038be <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8003882:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003886:	d014      	beq.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8003888:	e01c      	b.n	80038c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800388a:	f000 f831 	bl	80038f0 <HAL_RCCEx_GetD3PCLK1Freq>
 800388e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8003890:	e01e      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003892:	f107 0318 	add.w	r3, r7, #24
 8003896:	4618      	mov	r0, r3
 8003898:	f000 f840 	bl	800391c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80038a0:	e016      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80038a2:	f107 030c 	add.w	r3, r7, #12
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 f984 	bl	8003bb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80038b0:	e00e      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 80038b2:	4b0d      	ldr	r3, [pc, #52]	; (80038e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80038b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80038b6:	e00b      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 80038b8:	4b0c      	ldr	r3, [pc, #48]	; (80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80038ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80038bc:	e008      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 80038be:	4b07      	ldr	r3, [pc, #28]	; (80038dc <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80038c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80038c2:	e005      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80038c4:	2300      	movs	r3, #0
 80038c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80038c8:	bf00      	nop
 80038ca:	e001      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 80038cc:	2300      	movs	r3, #0
 80038ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80038d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3740      	adds	r7, #64	; 0x40
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	017d7840 	.word	0x017d7840
 80038e0:	00bb8000 	.word	0x00bb8000
 80038e4:	58024400 	.word	0x58024400
 80038e8:	03d09000 	.word	0x03d09000
 80038ec:	003d0900 	.word	0x003d0900

080038f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80038f4:	f7fe fe66 	bl	80025c4 <HAL_RCC_GetHCLKFreq>
 80038f8:	4601      	mov	r1, r0
 80038fa:	4b06      	ldr	r3, [pc, #24]	; (8003914 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	091b      	lsrs	r3, r3, #4
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	4a04      	ldr	r2, [pc, #16]	; (8003918 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003906:	5cd3      	ldrb	r3, [r2, r3]
 8003908:	f003 031f 	and.w	r3, r3, #31
 800390c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003910:	4618      	mov	r0, r3
 8003912:	bd80      	pop	{r7, pc}
 8003914:	58024400 	.word	0x58024400
 8003918:	080055e4 	.word	0x080055e4

0800391c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800391c:	b480      	push	{r7}
 800391e:	b089      	sub	sp, #36	; 0x24
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003924:	4b9d      	ldr	r3, [pc, #628]	; (8003b9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003928:	f003 0303 	and.w	r3, r3, #3
 800392c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800392e:	4b9b      	ldr	r3, [pc, #620]	; (8003b9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003932:	0b1b      	lsrs	r3, r3, #12
 8003934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003938:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800393a:	4b98      	ldr	r3, [pc, #608]	; (8003b9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800393c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393e:	091b      	lsrs	r3, r3, #4
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003946:	4b95      	ldr	r3, [pc, #596]	; (8003b9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394a:	08db      	lsrs	r3, r3, #3
 800394c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	fb02 f303 	mul.w	r3, r2, r3
 8003956:	ee07 3a90 	vmov	s15, r3
 800395a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800395e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 810a 	beq.w	8003b7e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d05a      	beq.n	8003a26 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8003970:	2b01      	cmp	r3, #1
 8003972:	d302      	bcc.n	800397a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8003974:	2b02      	cmp	r3, #2
 8003976:	d078      	beq.n	8003a6a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8003978:	e099      	b.n	8003aae <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800397a:	4b88      	ldr	r3, [pc, #544]	; (8003b9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0320 	and.w	r3, r3, #32
 8003982:	2b00      	cmp	r3, #0
 8003984:	d02d      	beq.n	80039e2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003986:	4b85      	ldr	r3, [pc, #532]	; (8003b9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	08db      	lsrs	r3, r3, #3
 800398c:	f003 0303 	and.w	r3, r3, #3
 8003990:	4a83      	ldr	r2, [pc, #524]	; (8003ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8003992:	fa22 f303 	lsr.w	r3, r2, r3
 8003996:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	ee07 3a90 	vmov	s15, r3
 800399e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	ee07 3a90 	vmov	s15, r3
 80039a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039b0:	4b7a      	ldr	r3, [pc, #488]	; (8003b9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80039b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039b8:	ee07 3a90 	vmov	s15, r3
 80039bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80039c4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8003ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80039c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039dc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80039e0:	e087      	b.n	8003af2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	ee07 3a90 	vmov	s15, r3
 80039e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ec:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8003ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80039f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039f4:	4b69      	ldr	r3, [pc, #420]	; (8003b9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80039f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039fc:	ee07 3a90 	vmov	s15, r3
 8003a00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a04:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a08:	eddf 5a66 	vldr	s11, [pc, #408]	; 8003ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003a0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a20:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a24:	e065      	b.n	8003af2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	ee07 3a90 	vmov	s15, r3
 8003a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a30:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003a34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a38:	4b58      	ldr	r3, [pc, #352]	; (8003b9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a40:	ee07 3a90 	vmov	s15, r3
 8003a44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a48:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a4c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8003ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003a50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a68:	e043      	b.n	8003af2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	ee07 3a90 	vmov	s15, r3
 8003a70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a74:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8003bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8003a78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a7c:	4b47      	ldr	r3, [pc, #284]	; (8003b9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a84:	ee07 3a90 	vmov	s15, r3
 8003a88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a90:	eddf 5a44 	vldr	s11, [pc, #272]	; 8003ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003a94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aa8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003aac:	e021      	b.n	8003af2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	ee07 3a90 	vmov	s15, r3
 8003ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ab8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003abc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ac0:	4b36      	ldr	r3, [pc, #216]	; (8003b9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac8:	ee07 3a90 	vmov	s15, r3
 8003acc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ad0:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ad4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8003ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003ad8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003adc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ae0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ae4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003af0:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003af2:	4b2a      	ldr	r3, [pc, #168]	; (8003b9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af6:	0a5b      	lsrs	r3, r3, #9
 8003af8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003afc:	ee07 3a90 	vmov	s15, r3
 8003b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b18:	ee17 2a90 	vmov	r2, s15
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003b20:	4b1e      	ldr	r3, [pc, #120]	; (8003b9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b24:	0c1b      	lsrs	r3, r3, #16
 8003b26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b2a:	ee07 3a90 	vmov	s15, r3
 8003b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b46:	ee17 2a90 	vmov	r2, s15
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003b4e:	4b13      	ldr	r3, [pc, #76]	; (8003b9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b52:	0e1b      	lsrs	r3, r3, #24
 8003b54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b58:	ee07 3a90 	vmov	s15, r3
 8003b5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b68:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b74:	ee17 2a90 	vmov	r2, s15
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003b7c:	e008      	b.n	8003b90 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	609a      	str	r2, [r3, #8]
}
 8003b90:	bf00      	nop
 8003b92:	3724      	adds	r7, #36	; 0x24
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	58024400 	.word	0x58024400
 8003ba0:	03d09000 	.word	0x03d09000
 8003ba4:	46000000 	.word	0x46000000
 8003ba8:	4c742400 	.word	0x4c742400
 8003bac:	4a742400 	.word	0x4a742400
 8003bb0:	4bbebc20 	.word	0x4bbebc20

08003bb4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b089      	sub	sp, #36	; 0x24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003bbc:	4b9d      	ldr	r3, [pc, #628]	; (8003e34 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc0:	f003 0303 	and.w	r3, r3, #3
 8003bc4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003bc6:	4b9b      	ldr	r3, [pc, #620]	; (8003e34 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bca:	0d1b      	lsrs	r3, r3, #20
 8003bcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bd0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003bd2:	4b98      	ldr	r3, [pc, #608]	; (8003e34 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd6:	0a1b      	lsrs	r3, r3, #8
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003bde:	4b95      	ldr	r3, [pc, #596]	; (8003e34 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be2:	08db      	lsrs	r3, r3, #3
 8003be4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	fb02 f303 	mul.w	r3, r2, r3
 8003bee:	ee07 3a90 	vmov	s15, r3
 8003bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bf6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 810a 	beq.w	8003e16 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d05a      	beq.n	8003cbe <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d302      	bcc.n	8003c12 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d078      	beq.n	8003d02 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8003c10:	e099      	b.n	8003d46 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c12:	4b88      	ldr	r3, [pc, #544]	; (8003e34 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0320 	and.w	r3, r3, #32
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d02d      	beq.n	8003c7a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003c1e:	4b85      	ldr	r3, [pc, #532]	; (8003e34 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	08db      	lsrs	r3, r3, #3
 8003c24:	f003 0303 	and.w	r3, r3, #3
 8003c28:	4a83      	ldr	r2, [pc, #524]	; (8003e38 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8003c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c2e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	ee07 3a90 	vmov	s15, r3
 8003c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	ee07 3a90 	vmov	s15, r3
 8003c40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c48:	4b7a      	ldr	r3, [pc, #488]	; (8003e34 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c50:	ee07 3a90 	vmov	s15, r3
 8003c54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c58:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c5c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8003e3c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003c60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c74:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003c78:	e087      	b.n	8003d8a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	ee07 3a90 	vmov	s15, r3
 8003c80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c84:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8003e40 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8003c88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c8c:	4b69      	ldr	r3, [pc, #420]	; (8003e34 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c94:	ee07 3a90 	vmov	s15, r3
 8003c98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ca0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8003e3c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003ca4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ca8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cb8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003cbc:	e065      	b.n	8003d8a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	ee07 3a90 	vmov	s15, r3
 8003cc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cc8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003e44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003ccc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cd0:	4b58      	ldr	r3, [pc, #352]	; (8003e34 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cd8:	ee07 3a90 	vmov	s15, r3
 8003cdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ce0:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ce4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8003e3c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003ce8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cf0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cfc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d00:	e043      	b.n	8003d8a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	ee07 3a90 	vmov	s15, r3
 8003d08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d0c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8003e48 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8003d10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d14:	4b47      	ldr	r3, [pc, #284]	; (8003e34 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d1c:	ee07 3a90 	vmov	s15, r3
 8003d20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d24:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d28:	eddf 5a44 	vldr	s11, [pc, #272]	; 8003e3c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003d2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d40:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d44:	e021      	b.n	8003d8a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	ee07 3a90 	vmov	s15, r3
 8003d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d50:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8003e44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003d54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d58:	4b36      	ldr	r3, [pc, #216]	; (8003e34 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d60:	ee07 3a90 	vmov	s15, r3
 8003d64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d68:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d6c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8003e3c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003d70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d84:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d88:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003d8a:	4b2a      	ldr	r3, [pc, #168]	; (8003e34 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	0a5b      	lsrs	r3, r3, #9
 8003d90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d94:	ee07 3a90 	vmov	s15, r3
 8003d98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003da0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003da4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003da8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003db0:	ee17 2a90 	vmov	r2, s15
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003db8:	4b1e      	ldr	r3, [pc, #120]	; (8003e34 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbc:	0c1b      	lsrs	r3, r3, #16
 8003dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dc2:	ee07 3a90 	vmov	s15, r3
 8003dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003dce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003dd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dde:	ee17 2a90 	vmov	r2, s15
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003de6:	4b13      	ldr	r3, [pc, #76]	; (8003e34 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	0e1b      	lsrs	r3, r3, #24
 8003dec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003df0:	ee07 3a90 	vmov	s15, r3
 8003df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003df8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003dfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e00:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e0c:	ee17 2a90 	vmov	r2, s15
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003e14:	e008      	b.n	8003e28 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	609a      	str	r2, [r3, #8]
}
 8003e28:	bf00      	nop
 8003e2a:	3724      	adds	r7, #36	; 0x24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	58024400 	.word	0x58024400
 8003e38:	03d09000 	.word	0x03d09000
 8003e3c:	46000000 	.word	0x46000000
 8003e40:	4c742400 	.word	0x4c742400
 8003e44:	4a742400 	.word	0x4a742400
 8003e48:	4bbebc20 	.word	0x4bbebc20

08003e4c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b089      	sub	sp, #36	; 0x24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e54:	4b9d      	ldr	r3, [pc, #628]	; (80040cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e58:	f003 0303 	and.w	r3, r3, #3
 8003e5c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8003e5e:	4b9b      	ldr	r3, [pc, #620]	; (80040cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e62:	091b      	lsrs	r3, r3, #4
 8003e64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e68:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8003e6a:	4b98      	ldr	r3, [pc, #608]	; (80040cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003e74:	4b95      	ldr	r3, [pc, #596]	; (80040cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e78:	08db      	lsrs	r3, r3, #3
 8003e7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	fb02 f303 	mul.w	r3, r2, r3
 8003e84:	ee07 3a90 	vmov	s15, r3
 8003e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e8c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 810a 	beq.w	80040ac <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d05a      	beq.n	8003f54 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d302      	bcc.n	8003ea8 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d078      	beq.n	8003f98 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8003ea6:	e099      	b.n	8003fdc <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ea8:	4b88      	ldr	r3, [pc, #544]	; (80040cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0320 	and.w	r3, r3, #32
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d02d      	beq.n	8003f10 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003eb4:	4b85      	ldr	r3, [pc, #532]	; (80040cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	08db      	lsrs	r3, r3, #3
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	4a84      	ldr	r2, [pc, #528]	; (80040d0 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8003ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec4:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	ee07 3a90 	vmov	s15, r3
 8003ecc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	ee07 3a90 	vmov	s15, r3
 8003ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ede:	4b7b      	ldr	r3, [pc, #492]	; (80040cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ee6:	ee07 3a90 	vmov	s15, r3
 8003eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eee:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ef2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80040d4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8003ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003efe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f0a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003f0e:	e087      	b.n	8004020 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	ee07 3a90 	vmov	s15, r3
 8003f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f1a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80040d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8003f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f22:	4b6a      	ldr	r3, [pc, #424]	; (80040cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f2a:	ee07 3a90 	vmov	s15, r3
 8003f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f32:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f36:	eddf 5a67 	vldr	s11, [pc, #412]	; 80040d4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8003f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f52:	e065      	b.n	8004020 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	ee07 3a90 	vmov	s15, r3
 8003f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f5e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80040dc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8003f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f66:	4b59      	ldr	r3, [pc, #356]	; (80040cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f6e:	ee07 3a90 	vmov	s15, r3
 8003f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f76:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f7a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80040d4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8003f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f96:	e043      	b.n	8004020 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	ee07 3a90 	vmov	s15, r3
 8003f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fa2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80040e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8003fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003faa:	4b48      	ldr	r3, [pc, #288]	; (80040cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fb2:	ee07 3a90 	vmov	s15, r3
 8003fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fba:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fbe:	eddf 5a45 	vldr	s11, [pc, #276]	; 80040d4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8003fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003fda:	e021      	b.n	8004020 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	ee07 3a90 	vmov	s15, r3
 8003fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fe6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80040dc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8003fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fee:	4b37      	ldr	r3, [pc, #220]	; (80040cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff6:	ee07 3a90 	vmov	s15, r3
 8003ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ffe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004002:	eddf 5a34 	vldr	s11, [pc, #208]	; 80040d4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8004006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800400a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800400e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800401a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800401e:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8004020:	4b2a      	ldr	r3, [pc, #168]	; (80040cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004024:	0a5b      	lsrs	r3, r3, #9
 8004026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800402a:	ee07 3a90 	vmov	s15, r3
 800402e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004032:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004036:	ee37 7a87 	vadd.f32	s14, s15, s14
 800403a:	edd7 6a07 	vldr	s13, [r7, #28]
 800403e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004046:	ee17 2a90 	vmov	r2, s15
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800404e:	4b1f      	ldr	r3, [pc, #124]	; (80040cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004052:	0c1b      	lsrs	r3, r3, #16
 8004054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004058:	ee07 3a90 	vmov	s15, r3
 800405c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004060:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004064:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004068:	edd7 6a07 	vldr	s13, [r7, #28]
 800406c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004070:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004074:	ee17 2a90 	vmov	r2, s15
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800407c:	4b13      	ldr	r3, [pc, #76]	; (80040cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800407e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004080:	0e1b      	lsrs	r3, r3, #24
 8004082:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004086:	ee07 3a90 	vmov	s15, r3
 800408a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800408e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004092:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004096:	edd7 6a07 	vldr	s13, [r7, #28]
 800409a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800409e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040a2:	ee17 2a90 	vmov	r2, s15
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80040aa:	e008      	b.n	80040be <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	609a      	str	r2, [r3, #8]
}
 80040be:	bf00      	nop
 80040c0:	3724      	adds	r7, #36	; 0x24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	58024400 	.word	0x58024400
 80040d0:	03d09000 	.word	0x03d09000
 80040d4:	46000000 	.word	0x46000000
 80040d8:	4c742400 	.word	0x4c742400
 80040dc:	4a742400 	.word	0x4a742400
 80040e0:	4bbebc20 	.word	0x4bbebc20

080040e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80040f2:	4b53      	ldr	r3, [pc, #332]	; (8004240 <RCCEx_PLL2_Config+0x15c>)
 80040f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	2b03      	cmp	r3, #3
 80040fc:	d101      	bne.n	8004102 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e099      	b.n	8004236 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004102:	4b4f      	ldr	r3, [pc, #316]	; (8004240 <RCCEx_PLL2_Config+0x15c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a4e      	ldr	r2, [pc, #312]	; (8004240 <RCCEx_PLL2_Config+0x15c>)
 8004108:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800410c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800410e:	f7fc fd97 	bl	8000c40 <HAL_GetTick>
 8004112:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004114:	e008      	b.n	8004128 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004116:	f7fc fd93 	bl	8000c40 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d901      	bls.n	8004128 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e086      	b.n	8004236 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004128:	4b45      	ldr	r3, [pc, #276]	; (8004240 <RCCEx_PLL2_Config+0x15c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1f0      	bne.n	8004116 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004134:	4b42      	ldr	r3, [pc, #264]	; (8004240 <RCCEx_PLL2_Config+0x15c>)
 8004136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004138:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	031b      	lsls	r3, r3, #12
 8004142:	493f      	ldr	r1, [pc, #252]	; (8004240 <RCCEx_PLL2_Config+0x15c>)
 8004144:	4313      	orrs	r3, r2
 8004146:	628b      	str	r3, [r1, #40]	; 0x28
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	3b01      	subs	r3, #1
 800414e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	3b01      	subs	r3, #1
 8004158:	025b      	lsls	r3, r3, #9
 800415a:	b29b      	uxth	r3, r3
 800415c:	431a      	orrs	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	3b01      	subs	r3, #1
 8004164:	041b      	lsls	r3, r3, #16
 8004166:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	3b01      	subs	r3, #1
 8004172:	061b      	lsls	r3, r3, #24
 8004174:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004178:	4931      	ldr	r1, [pc, #196]	; (8004240 <RCCEx_PLL2_Config+0x15c>)
 800417a:	4313      	orrs	r3, r2
 800417c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800417e:	4b30      	ldr	r3, [pc, #192]	; (8004240 <RCCEx_PLL2_Config+0x15c>)
 8004180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004182:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	492d      	ldr	r1, [pc, #180]	; (8004240 <RCCEx_PLL2_Config+0x15c>)
 800418c:	4313      	orrs	r3, r2
 800418e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004190:	4b2b      	ldr	r3, [pc, #172]	; (8004240 <RCCEx_PLL2_Config+0x15c>)
 8004192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004194:	f023 0220 	bic.w	r2, r3, #32
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	4928      	ldr	r1, [pc, #160]	; (8004240 <RCCEx_PLL2_Config+0x15c>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80041a2:	4b27      	ldr	r3, [pc, #156]	; (8004240 <RCCEx_PLL2_Config+0x15c>)
 80041a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a6:	4a26      	ldr	r2, [pc, #152]	; (8004240 <RCCEx_PLL2_Config+0x15c>)
 80041a8:	f023 0310 	bic.w	r3, r3, #16
 80041ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80041ae:	4b24      	ldr	r3, [pc, #144]	; (8004240 <RCCEx_PLL2_Config+0x15c>)
 80041b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041b2:	4b24      	ldr	r3, [pc, #144]	; (8004244 <RCCEx_PLL2_Config+0x160>)
 80041b4:	4013      	ands	r3, r2
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	69d2      	ldr	r2, [r2, #28]
 80041ba:	00d2      	lsls	r2, r2, #3
 80041bc:	4920      	ldr	r1, [pc, #128]	; (8004240 <RCCEx_PLL2_Config+0x15c>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80041c2:	4b1f      	ldr	r3, [pc, #124]	; (8004240 <RCCEx_PLL2_Config+0x15c>)
 80041c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c6:	4a1e      	ldr	r2, [pc, #120]	; (8004240 <RCCEx_PLL2_Config+0x15c>)
 80041c8:	f043 0310 	orr.w	r3, r3, #16
 80041cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d106      	bne.n	80041e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80041d4:	4b1a      	ldr	r3, [pc, #104]	; (8004240 <RCCEx_PLL2_Config+0x15c>)
 80041d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d8:	4a19      	ldr	r2, [pc, #100]	; (8004240 <RCCEx_PLL2_Config+0x15c>)
 80041da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80041e0:	e00f      	b.n	8004202 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d106      	bne.n	80041f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80041e8:	4b15      	ldr	r3, [pc, #84]	; (8004240 <RCCEx_PLL2_Config+0x15c>)
 80041ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ec:	4a14      	ldr	r2, [pc, #80]	; (8004240 <RCCEx_PLL2_Config+0x15c>)
 80041ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80041f4:	e005      	b.n	8004202 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80041f6:	4b12      	ldr	r3, [pc, #72]	; (8004240 <RCCEx_PLL2_Config+0x15c>)
 80041f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fa:	4a11      	ldr	r2, [pc, #68]	; (8004240 <RCCEx_PLL2_Config+0x15c>)
 80041fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004200:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004202:	4b0f      	ldr	r3, [pc, #60]	; (8004240 <RCCEx_PLL2_Config+0x15c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a0e      	ldr	r2, [pc, #56]	; (8004240 <RCCEx_PLL2_Config+0x15c>)
 8004208:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800420c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800420e:	f7fc fd17 	bl	8000c40 <HAL_GetTick>
 8004212:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004214:	e008      	b.n	8004228 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004216:	f7fc fd13 	bl	8000c40 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d901      	bls.n	8004228 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e006      	b.n	8004236 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004228:	4b05      	ldr	r3, [pc, #20]	; (8004240 <RCCEx_PLL2_Config+0x15c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d0f0      	beq.n	8004216 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004234:	7bfb      	ldrb	r3, [r7, #15]
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	58024400 	.word	0x58024400
 8004244:	ffff0007 	.word	0xffff0007

08004248 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004252:	2300      	movs	r3, #0
 8004254:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004256:	4b53      	ldr	r3, [pc, #332]	; (80043a4 <RCCEx_PLL3_Config+0x15c>)
 8004258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425a:	f003 0303 	and.w	r3, r3, #3
 800425e:	2b03      	cmp	r3, #3
 8004260:	d101      	bne.n	8004266 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e099      	b.n	800439a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004266:	4b4f      	ldr	r3, [pc, #316]	; (80043a4 <RCCEx_PLL3_Config+0x15c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a4e      	ldr	r2, [pc, #312]	; (80043a4 <RCCEx_PLL3_Config+0x15c>)
 800426c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004270:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004272:	f7fc fce5 	bl	8000c40 <HAL_GetTick>
 8004276:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004278:	e008      	b.n	800428c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800427a:	f7fc fce1 	bl	8000c40 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d901      	bls.n	800428c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e086      	b.n	800439a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800428c:	4b45      	ldr	r3, [pc, #276]	; (80043a4 <RCCEx_PLL3_Config+0x15c>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1f0      	bne.n	800427a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004298:	4b42      	ldr	r3, [pc, #264]	; (80043a4 <RCCEx_PLL3_Config+0x15c>)
 800429a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	051b      	lsls	r3, r3, #20
 80042a6:	493f      	ldr	r1, [pc, #252]	; (80043a4 <RCCEx_PLL3_Config+0x15c>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	628b      	str	r3, [r1, #40]	; 0x28
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	3b01      	subs	r3, #1
 80042b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	025b      	lsls	r3, r3, #9
 80042be:	b29b      	uxth	r3, r3
 80042c0:	431a      	orrs	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	041b      	lsls	r3, r3, #16
 80042ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	3b01      	subs	r3, #1
 80042d6:	061b      	lsls	r3, r3, #24
 80042d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80042dc:	4931      	ldr	r1, [pc, #196]	; (80043a4 <RCCEx_PLL3_Config+0x15c>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80042e2:	4b30      	ldr	r3, [pc, #192]	; (80043a4 <RCCEx_PLL3_Config+0x15c>)
 80042e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	492d      	ldr	r1, [pc, #180]	; (80043a4 <RCCEx_PLL3_Config+0x15c>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80042f4:	4b2b      	ldr	r3, [pc, #172]	; (80043a4 <RCCEx_PLL3_Config+0x15c>)
 80042f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	4928      	ldr	r1, [pc, #160]	; (80043a4 <RCCEx_PLL3_Config+0x15c>)
 8004302:	4313      	orrs	r3, r2
 8004304:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004306:	4b27      	ldr	r3, [pc, #156]	; (80043a4 <RCCEx_PLL3_Config+0x15c>)
 8004308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430a:	4a26      	ldr	r2, [pc, #152]	; (80043a4 <RCCEx_PLL3_Config+0x15c>)
 800430c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004310:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004312:	4b24      	ldr	r3, [pc, #144]	; (80043a4 <RCCEx_PLL3_Config+0x15c>)
 8004314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004316:	4b24      	ldr	r3, [pc, #144]	; (80043a8 <RCCEx_PLL3_Config+0x160>)
 8004318:	4013      	ands	r3, r2
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	69d2      	ldr	r2, [r2, #28]
 800431e:	00d2      	lsls	r2, r2, #3
 8004320:	4920      	ldr	r1, [pc, #128]	; (80043a4 <RCCEx_PLL3_Config+0x15c>)
 8004322:	4313      	orrs	r3, r2
 8004324:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004326:	4b1f      	ldr	r3, [pc, #124]	; (80043a4 <RCCEx_PLL3_Config+0x15c>)
 8004328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432a:	4a1e      	ldr	r2, [pc, #120]	; (80043a4 <RCCEx_PLL3_Config+0x15c>)
 800432c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004330:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d106      	bne.n	8004346 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004338:	4b1a      	ldr	r3, [pc, #104]	; (80043a4 <RCCEx_PLL3_Config+0x15c>)
 800433a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433c:	4a19      	ldr	r2, [pc, #100]	; (80043a4 <RCCEx_PLL3_Config+0x15c>)
 800433e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004342:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004344:	e00f      	b.n	8004366 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d106      	bne.n	800435a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800434c:	4b15      	ldr	r3, [pc, #84]	; (80043a4 <RCCEx_PLL3_Config+0x15c>)
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	4a14      	ldr	r2, [pc, #80]	; (80043a4 <RCCEx_PLL3_Config+0x15c>)
 8004352:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004356:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004358:	e005      	b.n	8004366 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800435a:	4b12      	ldr	r3, [pc, #72]	; (80043a4 <RCCEx_PLL3_Config+0x15c>)
 800435c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435e:	4a11      	ldr	r2, [pc, #68]	; (80043a4 <RCCEx_PLL3_Config+0x15c>)
 8004360:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004364:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004366:	4b0f      	ldr	r3, [pc, #60]	; (80043a4 <RCCEx_PLL3_Config+0x15c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a0e      	ldr	r2, [pc, #56]	; (80043a4 <RCCEx_PLL3_Config+0x15c>)
 800436c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004370:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004372:	f7fc fc65 	bl	8000c40 <HAL_GetTick>
 8004376:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004378:	e008      	b.n	800438c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800437a:	f7fc fc61 	bl	8000c40 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d901      	bls.n	800438c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e006      	b.n	800439a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800438c:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <RCCEx_PLL3_Config+0x15c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0f0      	beq.n	800437a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004398:	7bfb      	ldrb	r3, [r7, #15]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	58024400 	.word	0x58024400
 80043a8:	ffff0007 	.word	0xffff0007

080043ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e049      	b.n	8004452 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d106      	bne.n	80043d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7fc fa46 	bl	8000864 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	3304      	adds	r3, #4
 80043e8:	4619      	mov	r1, r3
 80043ea:	4610      	mov	r0, r2
 80043ec:	f000 fc98 	bl	8004d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b082      	sub	sp, #8
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d101      	bne.n	800446c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e049      	b.n	8004500 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	d106      	bne.n	8004486 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f841 	bl	8004508 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2202      	movs	r2, #2
 800448a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	3304      	adds	r3, #4
 8004496:	4619      	mov	r1, r3
 8004498:	4610      	mov	r0, r2
 800449a:	f000 fc41 	bl	8004d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3708      	adds	r7, #8
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e049      	b.n	80045c2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d106      	bne.n	8004548 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f841 	bl	80045ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2202      	movs	r2, #2
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3304      	adds	r3, #4
 8004558:	4619      	mov	r1, r3
 800455a:	4610      	mov	r0, r2
 800455c:	f000 fbe0 	bl	8004d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
	...

080045e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d109      	bne.n	8004604 <HAL_TIM_PWM_Start+0x24>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	bf14      	ite	ne
 80045fc:	2301      	movne	r3, #1
 80045fe:	2300      	moveq	r3, #0
 8004600:	b2db      	uxtb	r3, r3
 8004602:	e03c      	b.n	800467e <HAL_TIM_PWM_Start+0x9e>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	2b04      	cmp	r3, #4
 8004608:	d109      	bne.n	800461e <HAL_TIM_PWM_Start+0x3e>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b01      	cmp	r3, #1
 8004614:	bf14      	ite	ne
 8004616:	2301      	movne	r3, #1
 8004618:	2300      	moveq	r3, #0
 800461a:	b2db      	uxtb	r3, r3
 800461c:	e02f      	b.n	800467e <HAL_TIM_PWM_Start+0x9e>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2b08      	cmp	r3, #8
 8004622:	d109      	bne.n	8004638 <HAL_TIM_PWM_Start+0x58>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b01      	cmp	r3, #1
 800462e:	bf14      	ite	ne
 8004630:	2301      	movne	r3, #1
 8004632:	2300      	moveq	r3, #0
 8004634:	b2db      	uxtb	r3, r3
 8004636:	e022      	b.n	800467e <HAL_TIM_PWM_Start+0x9e>
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	2b0c      	cmp	r3, #12
 800463c:	d109      	bne.n	8004652 <HAL_TIM_PWM_Start+0x72>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b01      	cmp	r3, #1
 8004648:	bf14      	ite	ne
 800464a:	2301      	movne	r3, #1
 800464c:	2300      	moveq	r3, #0
 800464e:	b2db      	uxtb	r3, r3
 8004650:	e015      	b.n	800467e <HAL_TIM_PWM_Start+0x9e>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b10      	cmp	r3, #16
 8004656:	d109      	bne.n	800466c <HAL_TIM_PWM_Start+0x8c>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b01      	cmp	r3, #1
 8004662:	bf14      	ite	ne
 8004664:	2301      	movne	r3, #1
 8004666:	2300      	moveq	r3, #0
 8004668:	b2db      	uxtb	r3, r3
 800466a:	e008      	b.n	800467e <HAL_TIM_PWM_Start+0x9e>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b01      	cmp	r3, #1
 8004676:	bf14      	ite	ne
 8004678:	2301      	movne	r3, #1
 800467a:	2300      	moveq	r3, #0
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e06e      	b.n	8004764 <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d104      	bne.n	8004696 <HAL_TIM_PWM_Start+0xb6>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004694:	e023      	b.n	80046de <HAL_TIM_PWM_Start+0xfe>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b04      	cmp	r3, #4
 800469a:	d104      	bne.n	80046a6 <HAL_TIM_PWM_Start+0xc6>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046a4:	e01b      	b.n	80046de <HAL_TIM_PWM_Start+0xfe>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d104      	bne.n	80046b6 <HAL_TIM_PWM_Start+0xd6>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046b4:	e013      	b.n	80046de <HAL_TIM_PWM_Start+0xfe>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b0c      	cmp	r3, #12
 80046ba:	d104      	bne.n	80046c6 <HAL_TIM_PWM_Start+0xe6>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046c4:	e00b      	b.n	80046de <HAL_TIM_PWM_Start+0xfe>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2b10      	cmp	r3, #16
 80046ca:	d104      	bne.n	80046d6 <HAL_TIM_PWM_Start+0xf6>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2202      	movs	r2, #2
 80046d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046d4:	e003      	b.n	80046de <HAL_TIM_PWM_Start+0xfe>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2202      	movs	r2, #2
 80046da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2201      	movs	r2, #1
 80046e4:	6839      	ldr	r1, [r7, #0]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 fe82 	bl	80053f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a1e      	ldr	r2, [pc, #120]	; (800476c <HAL_TIM_PWM_Start+0x18c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d013      	beq.n	800471e <HAL_TIM_PWM_Start+0x13e>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a1d      	ldr	r2, [pc, #116]	; (8004770 <HAL_TIM_PWM_Start+0x190>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d00e      	beq.n	800471e <HAL_TIM_PWM_Start+0x13e>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a1b      	ldr	r2, [pc, #108]	; (8004774 <HAL_TIM_PWM_Start+0x194>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d009      	beq.n	800471e <HAL_TIM_PWM_Start+0x13e>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a1a      	ldr	r2, [pc, #104]	; (8004778 <HAL_TIM_PWM_Start+0x198>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d004      	beq.n	800471e <HAL_TIM_PWM_Start+0x13e>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a18      	ldr	r2, [pc, #96]	; (800477c <HAL_TIM_PWM_Start+0x19c>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d101      	bne.n	8004722 <HAL_TIM_PWM_Start+0x142>
 800471e:	2301      	movs	r3, #1
 8004720:	e000      	b.n	8004724 <HAL_TIM_PWM_Start+0x144>
 8004722:	2300      	movs	r3, #0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d007      	beq.n	8004738 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004736:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689a      	ldr	r2, [r3, #8]
 800473e:	4b10      	ldr	r3, [pc, #64]	; (8004780 <HAL_TIM_PWM_Start+0x1a0>)
 8004740:	4013      	ands	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2b06      	cmp	r3, #6
 8004748:	d00b      	beq.n	8004762 <HAL_TIM_PWM_Start+0x182>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004750:	d007      	beq.n	8004762 <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f042 0201 	orr.w	r2, r2, #1
 8004760:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	40010000 	.word	0x40010000
 8004770:	40010400 	.word	0x40010400
 8004774:	40014000 	.word	0x40014000
 8004778:	40014400 	.word	0x40014400
 800477c:	40014800 	.word	0x40014800
 8004780:	00010007 	.word	0x00010007

08004784 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b02      	cmp	r3, #2
 8004798:	d122      	bne.n	80047e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d11b      	bne.n	80047e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f06f 0202 	mvn.w	r2, #2
 80047b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 fa8c 	bl	8004ce4 <HAL_TIM_IC_CaptureCallback>
 80047cc:	e005      	b.n	80047da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 fa7e 	bl	8004cd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 fa8f 	bl	8004cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	f003 0304 	and.w	r3, r3, #4
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d122      	bne.n	8004834 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b04      	cmp	r3, #4
 80047fa:	d11b      	bne.n	8004834 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f06f 0204 	mvn.w	r2, #4
 8004804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2202      	movs	r2, #2
 800480a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 fa62 	bl	8004ce4 <HAL_TIM_IC_CaptureCallback>
 8004820:	e005      	b.n	800482e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 fa54 	bl	8004cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 fa65 	bl	8004cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	2b08      	cmp	r3, #8
 8004840:	d122      	bne.n	8004888 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	2b08      	cmp	r3, #8
 800484e:	d11b      	bne.n	8004888 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f06f 0208 	mvn.w	r2, #8
 8004858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2204      	movs	r2, #4
 800485e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 fa38 	bl	8004ce4 <HAL_TIM_IC_CaptureCallback>
 8004874:	e005      	b.n	8004882 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 fa2a 	bl	8004cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 fa3b 	bl	8004cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f003 0310 	and.w	r3, r3, #16
 8004892:	2b10      	cmp	r3, #16
 8004894:	d122      	bne.n	80048dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f003 0310 	and.w	r3, r3, #16
 80048a0:	2b10      	cmp	r3, #16
 80048a2:	d11b      	bne.n	80048dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f06f 0210 	mvn.w	r2, #16
 80048ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2208      	movs	r2, #8
 80048b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fa0e 	bl	8004ce4 <HAL_TIM_IC_CaptureCallback>
 80048c8:	e005      	b.n	80048d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 fa00 	bl	8004cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 fa11 	bl	8004cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d10e      	bne.n	8004908 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d107      	bne.n	8004908 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f06f 0201 	mvn.w	r2, #1
 8004900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7fb ff14 	bl	8000730 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004912:	2b80      	cmp	r3, #128	; 0x80
 8004914:	d10e      	bne.n	8004934 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004920:	2b80      	cmp	r3, #128	; 0x80
 8004922:	d107      	bne.n	8004934 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800492c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 fe0c 	bl	800554c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004942:	d10e      	bne.n	8004962 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494e:	2b80      	cmp	r3, #128	; 0x80
 8004950:	d107      	bne.n	8004962 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800495a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 fdff 	bl	8005560 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496c:	2b40      	cmp	r3, #64	; 0x40
 800496e:	d10e      	bne.n	800498e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497a:	2b40      	cmp	r3, #64	; 0x40
 800497c:	d107      	bne.n	800498e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f9bf 	bl	8004d0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	f003 0320 	and.w	r3, r3, #32
 8004998:	2b20      	cmp	r3, #32
 800499a:	d10e      	bne.n	80049ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f003 0320 	and.w	r3, r3, #32
 80049a6:	2b20      	cmp	r3, #32
 80049a8:	d107      	bne.n	80049ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f06f 0220 	mvn.w	r2, #32
 80049b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 fdbf 	bl	8005538 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049ba:	bf00      	nop
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
	...

080049c4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d101      	bne.n	80049de <HAL_TIM_OC_ConfigChannel+0x1a>
 80049da:	2302      	movs	r3, #2
 80049dc:	e064      	b.n	8004aa8 <HAL_TIM_OC_ConfigChannel+0xe4>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b14      	cmp	r3, #20
 80049ea:	d857      	bhi.n	8004a9c <HAL_TIM_OC_ConfigChannel+0xd8>
 80049ec:	a201      	add	r2, pc, #4	; (adr r2, 80049f4 <HAL_TIM_OC_ConfigChannel+0x30>)
 80049ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f2:	bf00      	nop
 80049f4:	08004a49 	.word	0x08004a49
 80049f8:	08004a9d 	.word	0x08004a9d
 80049fc:	08004a9d 	.word	0x08004a9d
 8004a00:	08004a9d 	.word	0x08004a9d
 8004a04:	08004a57 	.word	0x08004a57
 8004a08:	08004a9d 	.word	0x08004a9d
 8004a0c:	08004a9d 	.word	0x08004a9d
 8004a10:	08004a9d 	.word	0x08004a9d
 8004a14:	08004a65 	.word	0x08004a65
 8004a18:	08004a9d 	.word	0x08004a9d
 8004a1c:	08004a9d 	.word	0x08004a9d
 8004a20:	08004a9d 	.word	0x08004a9d
 8004a24:	08004a73 	.word	0x08004a73
 8004a28:	08004a9d 	.word	0x08004a9d
 8004a2c:	08004a9d 	.word	0x08004a9d
 8004a30:	08004a9d 	.word	0x08004a9d
 8004a34:	08004a81 	.word	0x08004a81
 8004a38:	08004a9d 	.word	0x08004a9d
 8004a3c:	08004a9d 	.word	0x08004a9d
 8004a40:	08004a9d 	.word	0x08004a9d
 8004a44:	08004a8f 	.word	0x08004a8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68b9      	ldr	r1, [r7, #8]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fa00 	bl	8004e54 <TIM_OC1_SetConfig>
      break;
 8004a54:	e023      	b.n	8004a9e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68b9      	ldr	r1, [r7, #8]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 fa89 	bl	8004f74 <TIM_OC2_SetConfig>
      break;
 8004a62:	e01c      	b.n	8004a9e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68b9      	ldr	r1, [r7, #8]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 fb0c 	bl	8005088 <TIM_OC3_SetConfig>
      break;
 8004a70:	e015      	b.n	8004a9e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68b9      	ldr	r1, [r7, #8]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 fb8b 	bl	8005194 <TIM_OC4_SetConfig>
      break;
 8004a7e:	e00e      	b.n	8004a9e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68b9      	ldr	r1, [r7, #8]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 fbec 	bl	8005264 <TIM_OC5_SetConfig>
      break;
 8004a8c:	e007      	b.n	8004a9e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68b9      	ldr	r1, [r7, #8]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f000 fc47 	bl	8005328 <TIM_OC6_SetConfig>
      break;
 8004a9a:	e000      	b.n	8004a9e <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 8004a9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d101      	bne.n	8004aca <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	e0fd      	b.n	8004cc6 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b14      	cmp	r3, #20
 8004ad6:	f200 80f0 	bhi.w	8004cba <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004ada:	a201      	add	r2, pc, #4	; (adr r2, 8004ae0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae0:	08004b35 	.word	0x08004b35
 8004ae4:	08004cbb 	.word	0x08004cbb
 8004ae8:	08004cbb 	.word	0x08004cbb
 8004aec:	08004cbb 	.word	0x08004cbb
 8004af0:	08004b75 	.word	0x08004b75
 8004af4:	08004cbb 	.word	0x08004cbb
 8004af8:	08004cbb 	.word	0x08004cbb
 8004afc:	08004cbb 	.word	0x08004cbb
 8004b00:	08004bb7 	.word	0x08004bb7
 8004b04:	08004cbb 	.word	0x08004cbb
 8004b08:	08004cbb 	.word	0x08004cbb
 8004b0c:	08004cbb 	.word	0x08004cbb
 8004b10:	08004bf7 	.word	0x08004bf7
 8004b14:	08004cbb 	.word	0x08004cbb
 8004b18:	08004cbb 	.word	0x08004cbb
 8004b1c:	08004cbb 	.word	0x08004cbb
 8004b20:	08004c39 	.word	0x08004c39
 8004b24:	08004cbb 	.word	0x08004cbb
 8004b28:	08004cbb 	.word	0x08004cbb
 8004b2c:	08004cbb 	.word	0x08004cbb
 8004b30:	08004c79 	.word	0x08004c79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68b9      	ldr	r1, [r7, #8]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 f98a 	bl	8004e54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	699a      	ldr	r2, [r3, #24]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f042 0208 	orr.w	r2, r2, #8
 8004b4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	699a      	ldr	r2, [r3, #24]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0204 	bic.w	r2, r2, #4
 8004b5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6999      	ldr	r1, [r3, #24]
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	691a      	ldr	r2, [r3, #16]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	619a      	str	r2, [r3, #24]
      break;
 8004b72:	e0a3      	b.n	8004cbc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68b9      	ldr	r1, [r7, #8]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 f9fa 	bl	8004f74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699a      	ldr	r2, [r3, #24]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	699a      	ldr	r2, [r3, #24]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6999      	ldr	r1, [r3, #24]
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	021a      	lsls	r2, r3, #8
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	619a      	str	r2, [r3, #24]
      break;
 8004bb4:	e082      	b.n	8004cbc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68b9      	ldr	r1, [r7, #8]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 fa63 	bl	8005088 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69da      	ldr	r2, [r3, #28]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f042 0208 	orr.w	r2, r2, #8
 8004bd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	69da      	ldr	r2, [r3, #28]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0204 	bic.w	r2, r2, #4
 8004be0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	69d9      	ldr	r1, [r3, #28]
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	691a      	ldr	r2, [r3, #16]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	61da      	str	r2, [r3, #28]
      break;
 8004bf4:	e062      	b.n	8004cbc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68b9      	ldr	r1, [r7, #8]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 fac9 	bl	8005194 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	69da      	ldr	r2, [r3, #28]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	69da      	ldr	r2, [r3, #28]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	69d9      	ldr	r1, [r3, #28]
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	021a      	lsls	r2, r3, #8
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	61da      	str	r2, [r3, #28]
      break;
 8004c36:	e041      	b.n	8004cbc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68b9      	ldr	r1, [r7, #8]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fb10 	bl	8005264 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0208 	orr.w	r2, r2, #8
 8004c52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0204 	bic.w	r2, r2, #4
 8004c62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	691a      	ldr	r2, [r3, #16]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c76:	e021      	b.n	8004cbc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68b9      	ldr	r1, [r7, #8]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 fb52 	bl	8005328 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ca2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	021a      	lsls	r2, r3, #8
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004cb8:	e000      	b.n	8004cbc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004cba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop

08004cd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a40      	ldr	r2, [pc, #256]	; (8004e34 <TIM_Base_SetConfig+0x114>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d013      	beq.n	8004d60 <TIM_Base_SetConfig+0x40>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d3e:	d00f      	beq.n	8004d60 <TIM_Base_SetConfig+0x40>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a3d      	ldr	r2, [pc, #244]	; (8004e38 <TIM_Base_SetConfig+0x118>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d00b      	beq.n	8004d60 <TIM_Base_SetConfig+0x40>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a3c      	ldr	r2, [pc, #240]	; (8004e3c <TIM_Base_SetConfig+0x11c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d007      	beq.n	8004d60 <TIM_Base_SetConfig+0x40>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a3b      	ldr	r2, [pc, #236]	; (8004e40 <TIM_Base_SetConfig+0x120>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d003      	beq.n	8004d60 <TIM_Base_SetConfig+0x40>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a3a      	ldr	r2, [pc, #232]	; (8004e44 <TIM_Base_SetConfig+0x124>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d108      	bne.n	8004d72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a2f      	ldr	r2, [pc, #188]	; (8004e34 <TIM_Base_SetConfig+0x114>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d01f      	beq.n	8004dba <TIM_Base_SetConfig+0x9a>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d80:	d01b      	beq.n	8004dba <TIM_Base_SetConfig+0x9a>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a2c      	ldr	r2, [pc, #176]	; (8004e38 <TIM_Base_SetConfig+0x118>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d017      	beq.n	8004dba <TIM_Base_SetConfig+0x9a>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a2b      	ldr	r2, [pc, #172]	; (8004e3c <TIM_Base_SetConfig+0x11c>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d013      	beq.n	8004dba <TIM_Base_SetConfig+0x9a>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a2a      	ldr	r2, [pc, #168]	; (8004e40 <TIM_Base_SetConfig+0x120>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d00f      	beq.n	8004dba <TIM_Base_SetConfig+0x9a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a29      	ldr	r2, [pc, #164]	; (8004e44 <TIM_Base_SetConfig+0x124>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d00b      	beq.n	8004dba <TIM_Base_SetConfig+0x9a>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a28      	ldr	r2, [pc, #160]	; (8004e48 <TIM_Base_SetConfig+0x128>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d007      	beq.n	8004dba <TIM_Base_SetConfig+0x9a>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a27      	ldr	r2, [pc, #156]	; (8004e4c <TIM_Base_SetConfig+0x12c>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d003      	beq.n	8004dba <TIM_Base_SetConfig+0x9a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a26      	ldr	r2, [pc, #152]	; (8004e50 <TIM_Base_SetConfig+0x130>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d108      	bne.n	8004dcc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a10      	ldr	r2, [pc, #64]	; (8004e34 <TIM_Base_SetConfig+0x114>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d00f      	beq.n	8004e18 <TIM_Base_SetConfig+0xf8>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a12      	ldr	r2, [pc, #72]	; (8004e44 <TIM_Base_SetConfig+0x124>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d00b      	beq.n	8004e18 <TIM_Base_SetConfig+0xf8>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a11      	ldr	r2, [pc, #68]	; (8004e48 <TIM_Base_SetConfig+0x128>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d007      	beq.n	8004e18 <TIM_Base_SetConfig+0xf8>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a10      	ldr	r2, [pc, #64]	; (8004e4c <TIM_Base_SetConfig+0x12c>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d003      	beq.n	8004e18 <TIM_Base_SetConfig+0xf8>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a0f      	ldr	r2, [pc, #60]	; (8004e50 <TIM_Base_SetConfig+0x130>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d103      	bne.n	8004e20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	691a      	ldr	r2, [r3, #16]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	615a      	str	r2, [r3, #20]
}
 8004e26:	bf00      	nop
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	40010000 	.word	0x40010000
 8004e38:	40000400 	.word	0x40000400
 8004e3c:	40000800 	.word	0x40000800
 8004e40:	40000c00 	.word	0x40000c00
 8004e44:	40010400 	.word	0x40010400
 8004e48:	40014000 	.word	0x40014000
 8004e4c:	40014400 	.word	0x40014400
 8004e50:	40014800 	.word	0x40014800

08004e54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b087      	sub	sp, #28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	f023 0201 	bic.w	r2, r3, #1
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	4b37      	ldr	r3, [pc, #220]	; (8004f5c <TIM_OC1_SetConfig+0x108>)
 8004e80:	4013      	ands	r3, r2
 8004e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f023 0303 	bic.w	r3, r3, #3
 8004e8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f023 0302 	bic.w	r3, r3, #2
 8004e9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a2d      	ldr	r2, [pc, #180]	; (8004f60 <TIM_OC1_SetConfig+0x10c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d00f      	beq.n	8004ed0 <TIM_OC1_SetConfig+0x7c>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a2c      	ldr	r2, [pc, #176]	; (8004f64 <TIM_OC1_SetConfig+0x110>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d00b      	beq.n	8004ed0 <TIM_OC1_SetConfig+0x7c>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a2b      	ldr	r2, [pc, #172]	; (8004f68 <TIM_OC1_SetConfig+0x114>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d007      	beq.n	8004ed0 <TIM_OC1_SetConfig+0x7c>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a2a      	ldr	r2, [pc, #168]	; (8004f6c <TIM_OC1_SetConfig+0x118>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d003      	beq.n	8004ed0 <TIM_OC1_SetConfig+0x7c>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a29      	ldr	r2, [pc, #164]	; (8004f70 <TIM_OC1_SetConfig+0x11c>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d10c      	bne.n	8004eea <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	f023 0308 	bic.w	r3, r3, #8
 8004ed6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f023 0304 	bic.w	r3, r3, #4
 8004ee8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a1c      	ldr	r2, [pc, #112]	; (8004f60 <TIM_OC1_SetConfig+0x10c>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d00f      	beq.n	8004f12 <TIM_OC1_SetConfig+0xbe>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a1b      	ldr	r2, [pc, #108]	; (8004f64 <TIM_OC1_SetConfig+0x110>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d00b      	beq.n	8004f12 <TIM_OC1_SetConfig+0xbe>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a1a      	ldr	r2, [pc, #104]	; (8004f68 <TIM_OC1_SetConfig+0x114>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d007      	beq.n	8004f12 <TIM_OC1_SetConfig+0xbe>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a19      	ldr	r2, [pc, #100]	; (8004f6c <TIM_OC1_SetConfig+0x118>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d003      	beq.n	8004f12 <TIM_OC1_SetConfig+0xbe>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a18      	ldr	r2, [pc, #96]	; (8004f70 <TIM_OC1_SetConfig+0x11c>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d111      	bne.n	8004f36 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	621a      	str	r2, [r3, #32]
}
 8004f50:	bf00      	nop
 8004f52:	371c      	adds	r7, #28
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	fffeff8f 	.word	0xfffeff8f
 8004f60:	40010000 	.word	0x40010000
 8004f64:	40010400 	.word	0x40010400
 8004f68:	40014000 	.word	0x40014000
 8004f6c:	40014400 	.word	0x40014400
 8004f70:	40014800 	.word	0x40014800

08004f74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	f023 0210 	bic.w	r2, r3, #16
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	4b34      	ldr	r3, [pc, #208]	; (8005070 <TIM_OC2_SetConfig+0xfc>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	021b      	lsls	r3, r3, #8
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f023 0320 	bic.w	r3, r3, #32
 8004fbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	011b      	lsls	r3, r3, #4
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a29      	ldr	r2, [pc, #164]	; (8005074 <TIM_OC2_SetConfig+0x100>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d003      	beq.n	8004fdc <TIM_OC2_SetConfig+0x68>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a28      	ldr	r2, [pc, #160]	; (8005078 <TIM_OC2_SetConfig+0x104>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d10d      	bne.n	8004ff8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fe2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	011b      	lsls	r3, r3, #4
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ff6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a1e      	ldr	r2, [pc, #120]	; (8005074 <TIM_OC2_SetConfig+0x100>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d00f      	beq.n	8005020 <TIM_OC2_SetConfig+0xac>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a1d      	ldr	r2, [pc, #116]	; (8005078 <TIM_OC2_SetConfig+0x104>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d00b      	beq.n	8005020 <TIM_OC2_SetConfig+0xac>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a1c      	ldr	r2, [pc, #112]	; (800507c <TIM_OC2_SetConfig+0x108>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d007      	beq.n	8005020 <TIM_OC2_SetConfig+0xac>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a1b      	ldr	r2, [pc, #108]	; (8005080 <TIM_OC2_SetConfig+0x10c>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d003      	beq.n	8005020 <TIM_OC2_SetConfig+0xac>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a1a      	ldr	r2, [pc, #104]	; (8005084 <TIM_OC2_SetConfig+0x110>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d113      	bne.n	8005048 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005026:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800502e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	4313      	orrs	r3, r2
 800503a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	4313      	orrs	r3, r2
 8005046:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	621a      	str	r2, [r3, #32]
}
 8005062:	bf00      	nop
 8005064:	371c      	adds	r7, #28
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	feff8fff 	.word	0xfeff8fff
 8005074:	40010000 	.word	0x40010000
 8005078:	40010400 	.word	0x40010400
 800507c:	40014000 	.word	0x40014000
 8005080:	40014400 	.word	0x40014400
 8005084:	40014800 	.word	0x40014800

08005088 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 0303 	bic.w	r3, r3, #3
 80050be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	021b      	lsls	r3, r3, #8
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	4313      	orrs	r3, r2
 80050dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a27      	ldr	r2, [pc, #156]	; (8005180 <TIM_OC3_SetConfig+0xf8>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d003      	beq.n	80050ee <TIM_OC3_SetConfig+0x66>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a26      	ldr	r2, [pc, #152]	; (8005184 <TIM_OC3_SetConfig+0xfc>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d10d      	bne.n	800510a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	021b      	lsls	r3, r3, #8
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	4313      	orrs	r3, r2
 8005100:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005108:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a1c      	ldr	r2, [pc, #112]	; (8005180 <TIM_OC3_SetConfig+0xf8>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d00f      	beq.n	8005132 <TIM_OC3_SetConfig+0xaa>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a1b      	ldr	r2, [pc, #108]	; (8005184 <TIM_OC3_SetConfig+0xfc>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d00b      	beq.n	8005132 <TIM_OC3_SetConfig+0xaa>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a1a      	ldr	r2, [pc, #104]	; (8005188 <TIM_OC3_SetConfig+0x100>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d007      	beq.n	8005132 <TIM_OC3_SetConfig+0xaa>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a19      	ldr	r2, [pc, #100]	; (800518c <TIM_OC3_SetConfig+0x104>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d003      	beq.n	8005132 <TIM_OC3_SetConfig+0xaa>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a18      	ldr	r2, [pc, #96]	; (8005190 <TIM_OC3_SetConfig+0x108>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d113      	bne.n	800515a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005138:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005140:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	011b      	lsls	r3, r3, #4
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	4313      	orrs	r3, r2
 800514c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	011b      	lsls	r3, r3, #4
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	4313      	orrs	r3, r2
 8005158:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	621a      	str	r2, [r3, #32]
}
 8005174:	bf00      	nop
 8005176:	371c      	adds	r7, #28
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	40010000 	.word	0x40010000
 8005184:	40010400 	.word	0x40010400
 8005188:	40014000 	.word	0x40014000
 800518c:	40014400 	.word	0x40014400
 8005190:	40014800 	.word	0x40014800

08005194 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005194:	b480      	push	{r7}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	021b      	lsls	r3, r3, #8
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	031b      	lsls	r3, r3, #12
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a18      	ldr	r2, [pc, #96]	; (8005250 <TIM_OC4_SetConfig+0xbc>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d00f      	beq.n	8005214 <TIM_OC4_SetConfig+0x80>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a17      	ldr	r2, [pc, #92]	; (8005254 <TIM_OC4_SetConfig+0xc0>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d00b      	beq.n	8005214 <TIM_OC4_SetConfig+0x80>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a16      	ldr	r2, [pc, #88]	; (8005258 <TIM_OC4_SetConfig+0xc4>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d007      	beq.n	8005214 <TIM_OC4_SetConfig+0x80>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a15      	ldr	r2, [pc, #84]	; (800525c <TIM_OC4_SetConfig+0xc8>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d003      	beq.n	8005214 <TIM_OC4_SetConfig+0x80>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a14      	ldr	r2, [pc, #80]	; (8005260 <TIM_OC4_SetConfig+0xcc>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d109      	bne.n	8005228 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800521a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	019b      	lsls	r3, r3, #6
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	4313      	orrs	r3, r2
 8005226:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	621a      	str	r2, [r3, #32]
}
 8005242:	bf00      	nop
 8005244:	371c      	adds	r7, #28
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	40010000 	.word	0x40010000
 8005254:	40010400 	.word	0x40010400
 8005258:	40014000 	.word	0x40014000
 800525c:	40014400 	.word	0x40014400
 8005260:	40014800 	.word	0x40014800

08005264 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	4313      	orrs	r3, r2
 800529c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80052a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	041b      	lsls	r3, r3, #16
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a17      	ldr	r2, [pc, #92]	; (8005314 <TIM_OC5_SetConfig+0xb0>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d00f      	beq.n	80052da <TIM_OC5_SetConfig+0x76>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a16      	ldr	r2, [pc, #88]	; (8005318 <TIM_OC5_SetConfig+0xb4>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d00b      	beq.n	80052da <TIM_OC5_SetConfig+0x76>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a15      	ldr	r2, [pc, #84]	; (800531c <TIM_OC5_SetConfig+0xb8>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d007      	beq.n	80052da <TIM_OC5_SetConfig+0x76>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a14      	ldr	r2, [pc, #80]	; (8005320 <TIM_OC5_SetConfig+0xbc>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d003      	beq.n	80052da <TIM_OC5_SetConfig+0x76>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a13      	ldr	r2, [pc, #76]	; (8005324 <TIM_OC5_SetConfig+0xc0>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d109      	bne.n	80052ee <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	021b      	lsls	r3, r3, #8
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	621a      	str	r2, [r3, #32]
}
 8005308:	bf00      	nop
 800530a:	371c      	adds	r7, #28
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr
 8005314:	40010000 	.word	0x40010000
 8005318:	40010400 	.word	0x40010400
 800531c:	40014000 	.word	0x40014000
 8005320:	40014400 	.word	0x40014400
 8005324:	40014800 	.word	0x40014800

08005328 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005328:	b480      	push	{r7}
 800532a:	b087      	sub	sp, #28
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800534e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	021b      	lsls	r3, r3, #8
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	4313      	orrs	r3, r2
 8005362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800536a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	051b      	lsls	r3, r3, #20
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	4313      	orrs	r3, r2
 8005376:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a18      	ldr	r2, [pc, #96]	; (80053dc <TIM_OC6_SetConfig+0xb4>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d00f      	beq.n	80053a0 <TIM_OC6_SetConfig+0x78>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a17      	ldr	r2, [pc, #92]	; (80053e0 <TIM_OC6_SetConfig+0xb8>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d00b      	beq.n	80053a0 <TIM_OC6_SetConfig+0x78>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a16      	ldr	r2, [pc, #88]	; (80053e4 <TIM_OC6_SetConfig+0xbc>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d007      	beq.n	80053a0 <TIM_OC6_SetConfig+0x78>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a15      	ldr	r2, [pc, #84]	; (80053e8 <TIM_OC6_SetConfig+0xc0>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d003      	beq.n	80053a0 <TIM_OC6_SetConfig+0x78>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a14      	ldr	r2, [pc, #80]	; (80053ec <TIM_OC6_SetConfig+0xc4>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d109      	bne.n	80053b4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80053a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	029b      	lsls	r3, r3, #10
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	621a      	str	r2, [r3, #32]
}
 80053ce:	bf00      	nop
 80053d0:	371c      	adds	r7, #28
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	40010000 	.word	0x40010000
 80053e0:	40010400 	.word	0x40010400
 80053e4:	40014000 	.word	0x40014000
 80053e8:	40014400 	.word	0x40014400
 80053ec:	40014800 	.word	0x40014800

080053f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	f003 031f 	and.w	r3, r3, #31
 8005402:	2201      	movs	r2, #1
 8005404:	fa02 f303 	lsl.w	r3, r2, r3
 8005408:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6a1a      	ldr	r2, [r3, #32]
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	43db      	mvns	r3, r3
 8005412:	401a      	ands	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6a1a      	ldr	r2, [r3, #32]
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	f003 031f 	and.w	r3, r3, #31
 8005422:	6879      	ldr	r1, [r7, #4]
 8005424:	fa01 f303 	lsl.w	r3, r1, r3
 8005428:	431a      	orrs	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	621a      	str	r2, [r3, #32]
}
 800542e:	bf00      	nop
 8005430:	371c      	adds	r7, #28
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
	...

0800543c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005446:	2300      	movs	r3, #0
 8005448:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005450:	2b01      	cmp	r3, #1
 8005452:	d101      	bne.n	8005458 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005454:	2302      	movs	r3, #2
 8005456:	e065      	b.n	8005524 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	4313      	orrs	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4313      	orrs	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	041b      	lsls	r3, r3, #16
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a16      	ldr	r2, [pc, #88]	; (8005530 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d004      	beq.n	80054e6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a14      	ldr	r2, [pc, #80]	; (8005534 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d115      	bne.n	8005512 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	051b      	lsls	r3, r3, #20
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	69db      	ldr	r3, [r3, #28]
 8005500:	4313      	orrs	r3, r2
 8005502:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	4313      	orrs	r3, r2
 8005510:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3714      	adds	r7, #20
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr
 8005530:	40010000 	.word	0x40010000
 8005534:	40010400 	.word	0x40010400

08005538 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <__libc_init_array>:
 8005574:	b570      	push	{r4, r5, r6, lr}
 8005576:	4e0d      	ldr	r6, [pc, #52]	; (80055ac <__libc_init_array+0x38>)
 8005578:	4c0d      	ldr	r4, [pc, #52]	; (80055b0 <__libc_init_array+0x3c>)
 800557a:	1ba4      	subs	r4, r4, r6
 800557c:	10a4      	asrs	r4, r4, #2
 800557e:	2500      	movs	r5, #0
 8005580:	42a5      	cmp	r5, r4
 8005582:	d109      	bne.n	8005598 <__libc_init_array+0x24>
 8005584:	4e0b      	ldr	r6, [pc, #44]	; (80055b4 <__libc_init_array+0x40>)
 8005586:	4c0c      	ldr	r4, [pc, #48]	; (80055b8 <__libc_init_array+0x44>)
 8005588:	f000 f820 	bl	80055cc <_init>
 800558c:	1ba4      	subs	r4, r4, r6
 800558e:	10a4      	asrs	r4, r4, #2
 8005590:	2500      	movs	r5, #0
 8005592:	42a5      	cmp	r5, r4
 8005594:	d105      	bne.n	80055a2 <__libc_init_array+0x2e>
 8005596:	bd70      	pop	{r4, r5, r6, pc}
 8005598:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800559c:	4798      	blx	r3
 800559e:	3501      	adds	r5, #1
 80055a0:	e7ee      	b.n	8005580 <__libc_init_array+0xc>
 80055a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055a6:	4798      	blx	r3
 80055a8:	3501      	adds	r5, #1
 80055aa:	e7f2      	b.n	8005592 <__libc_init_array+0x1e>
 80055ac:	080055f4 	.word	0x080055f4
 80055b0:	080055f4 	.word	0x080055f4
 80055b4:	080055f4 	.word	0x080055f4
 80055b8:	080055f8 	.word	0x080055f8

080055bc <memset>:
 80055bc:	4402      	add	r2, r0
 80055be:	4603      	mov	r3, r0
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d100      	bne.n	80055c6 <memset+0xa>
 80055c4:	4770      	bx	lr
 80055c6:	f803 1b01 	strb.w	r1, [r3], #1
 80055ca:	e7f9      	b.n	80055c0 <memset+0x4>

080055cc <_init>:
 80055cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ce:	bf00      	nop
 80055d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055d2:	bc08      	pop	{r3}
 80055d4:	469e      	mov	lr, r3
 80055d6:	4770      	bx	lr

080055d8 <_fini>:
 80055d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055da:	bf00      	nop
 80055dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055de:	bc08      	pop	{r3}
 80055e0:	469e      	mov	lr, r3
 80055e2:	4770      	bx	lr
